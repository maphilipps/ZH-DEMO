<?php

/**
 * @file
 * Functions to support theming in the adesso_cms_theme theme.
 */

use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_preprocess().
 *
 * Make block header setting available globally in all templates.
 */
function adesso_cms_theme_preprocess(&$variables) {
  $variables['use_block_headers'] = theme_get_setting('use_block_headers') ?? TRUE;
}

/**
 * Implements hook_preprocess_page_title().
 */
function adesso_cms_theme_preprocess_page_title(&$variables) {
  $node = \Drupal::request()->attributes->get('node');

  // Ensure node is a valid entity.
  if (!$node || !is_object($node) || !method_exists($node, 'bundle')) {
    return;
  }

  // Override page title for landing_page content type.
  if ($node && $node->bundle() == 'landing_page') {

    // Hide page title for landing pages since it's handled by the page header component.
    $variables['hide'] = TRUE;

    // If the page title is hidden, set it to empty.
    if ($node->hasField('field_hide_page_title') && !empty($node->get('field_hide_page_title')->value)) {
      $variables['hide'] = TRUE;
    }
  }
  // Hide page title on article and page node pages.
  elseif ($node && $node->bundle() == 'article' || $node && $node->bundle() == 'page') {
    $variables['title'] = '';
  }
}

/**
 * Implements hook_preprocess_HOOK() for paragraphs.
 */
function adesso_cms_theme_preprocess_paragraph(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  $parent = $paragraph->getParentEntity();

  // Add parent as a variable.
  if (isset($parent)) {
    $variables['parent'] = $parent;
  }

  $paragraph_preprocess_function = 'adesso_cms_theme_preprocess_paragraph__' . $paragraph->bundle();
  if (function_exists($paragraph_preprocess_function)) {
    $paragraph_preprocess_function($variables);
  }
}

/**
 * Implements hook_preprocess_paragraph__sidebyside().
 */
function adesso_cms_theme_preprocess_paragraph__sidebyside(&$variables) {
  $paragraph = $variables['paragraph'];

  $features = [];
  if ($paragraph->hasField('field_features') && !$paragraph->field_features->isEmpty()) {
    foreach ($paragraph->field_features as $feature_item) {
      if ($feature_entity = $feature_item->entity) {
        $feature = NULL;

        if ($feature_entity->bundle() == 'stats_item') {
          $feature = [
            'type' => $feature_entity->bundle(),
            'heading' => $feature_entity->hasField('field_title') ? $feature_entity->field_title->value : '',
            'body' => $feature_entity->hasField('field_summary') ? $feature_entity->field_summary->value : '',
            'icon' => $feature_entity->hasField('field_icon') ? $feature_entity->field_icon->value : '',
            'media' => $feature_entity->hasField('field_custom_icon') && !$feature_entity->field_custom_icon->isEmpty() ? $feature_entity->field_custom_icon->view('default') : NULL,
          ];
        }
        else {
          $feature = [
            'type' => $feature_entity->bundle(),
            'summary' => $feature_entity->hasField('field_summary') ? $feature_entity->field_summary->value : '',
            'icon' => $feature_entity->hasField('field_icon') ? $feature_entity->field_icon->value : '',
          ];
        }

        $features[] = $feature;
      }
    }
  }

  $variables['features'] = $features;
}

/**
 * Implements hook_form_FORM_ID_alter() for search_api_page_block_form_search_results().
 */
function adesso_cms_theme_form_search_api_page_block_form_search_results_alter(&$form, $form_state, $form_id) {
  // Remove the 'invisible' option on the label.
  unset($form['keys']['#title_display']);

  // Let the CSS more easily adjust the size of the field.
  unset($form['keys']['#size']);

  // Change the title of the keywords field.
  $form['keys']['#title'] = t('Search term(s)');

  // Adding placeholder to text search field.
  $form['keys']['#attributes']['placeholder'] = t('Search Site');
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for 'input'.
 */
function adesso_cms_theme_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  // On submit buttons, add a theme suggestion that appends the submit button's
  // label to the filename, e.g. if the submit button is "Search" then the file
  // suggestion becomes "input__submit__search".
  if ($variables['theme_hook_original'] == 'input__submit') {
    if (!empty($variables['element']['#value'])) {
      $title = strtolower(Html::cleanCssIdentifier($variables['element']['#value']));
      $suggestions[] = $variables['theme_hook_original'] . '__' . $title;
    }
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function adesso_cms_theme_page_attachments_alter(array &$page) {
  // Add preload hints for critical resources.
  $critical_assets = [
    // Preload critical fonts only if they're actually used.
    [
      'href' => 'https://fonts.gstatic.com/s/opensans/v40/memSYaGs126MiZpBA-UvWbX2vVnXBbObj2OVZyOOSr4dVJWUgsjZ0B4gaVc.woff2',
      'as' => 'font',
      'type' => 'font/woff2',
      'crossorigin' => 'anonymous',
      'condition' => _adesso_cms_theme_is_homepage(),
    ],
    // Preload critical CSS
    // Critical JavaScript handled by libraries.yml
    // Preload hero images (only on homepage where they're used)
    [
      'href' => '/themes/custom/adesso_cms_theme/logo.svg',
      'as' => 'image',
      'condition' => _adesso_cms_theme_is_homepage(),
    ],
  ];

  // Add preload links.
  foreach ($critical_assets as $asset) {
    // Skip if condition is set and not met.
    if (isset($asset['condition']) && !$asset['condition']) {
      continue;
    }

    $preload_attributes = [
      'href' => $asset['href'],
      'rel' => 'preload',
      'as' => $asset['as'],
    ];

    // Add optional attributes.
    if (isset($asset['type'])) {
      $preload_attributes['type'] = $asset['type'];
    }
    if (isset($asset['crossorigin'])) {
      $preload_attributes['crossorigin'] = $asset['crossorigin'];
    }

    $page['#attached']['html_head_link'][] = [$preload_attributes, TRUE];
  }

  // Add resource hints for external domains.
  $dns_prefetch_domains = [
    'https://fonts.googleapis.com',
    'https://fonts.gstatic.com',
    'https://unpkg.com',
  ];

  foreach ($dns_prefetch_domains as $domain) {
    $page['#attached']['html_head_link'][] = [
      [
        'href' => $domain,
        'rel' => 'dns-prefetch',
      ],
      TRUE,
    ];

    // Also add preconnect for font domains.
    if (strpos($domain, 'fonts.') !== FALSE) {
      $page['#attached']['html_head_link'][] = [
        [
          'href' => $domain,
          'rel' => 'preconnect',
          'crossorigin' => 'anonymous',
        ],
        TRUE,
      ];
    }
  }

  // Add performance optimization meta tags.
  $performance_meta = [
    // Optimize CSS delivery.
    [
      'name' => 'x-css-loadcss',
      'content' => 'true',
    ],
    // Enable compression hints.
    [
      'name' => 'compression',
      'content' => 'gzip, br',
    ],
  ];

  foreach ($performance_meta as $meta) {
    $page['#attached']['html_head'][] = [
      [
        '#tag' => 'meta',
        '#attributes' => $meta,
      ],
      'performance_' . $meta['name'],
    ];
  }

  // Add service worker registration (if in production)
  if (_adesso_cms_theme_is_production()) {
    $page['#attached']['html_head'][] = [
      [
        '#tag' => 'script',
        '#value' => "
          if ('serviceWorker' in navigator) {
            window.addEventListener('load', function() {
              navigator.serviceWorker.register('/themes/custom/adesso_cms_theme/sw.js')
                .then(function(registration) {
                  console.log('SW registered: ', registration);
                })
                .catch(function(registrationError) {
                  console.log('SW registration failed: ', registrationError);
                });
            });
          }
        ",
        '#attributes' => ['defer' => 'defer'],
      ],
      'service_worker_registration',
    ];
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function adesso_cms_theme_theme_suggestions_page_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function adesso_cms_theme_theme_suggestions_node_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_views_view().
 */
function adesso_cms_theme_preprocess_views_view(&$variables) {
  $view = $variables['view'];
  $view_id = $view->id();
  
  // Add custom classes for directory views
  if (in_array($view_id, ['vereine', 'firmen', 'gastgewerbe'])) {
    $variables['attributes']['class'][] = 'directory-listing';
    $variables['attributes']['class'][] = 'directory-listing--' . $view_id;
  }
}

/**
 * Implements hook_preprocess_views_view_fields().
 */
function adesso_cms_theme_preprocess_views_view_fields(&$variables) {
  // The row entity is already available as row._entity in templates
  // No need to set additional variables that might cause array + null errors
}

/**
 * Implements hook_preprocess_HOOK().
 */
function adesso_cms_theme_preprocess_block(array &$variables) {

  // Add logo to footer.
  if (isset($variables['elements']['#id']) && $variables['elements']['#id'] == 'footer') {
    $config = \Drupal::config('system.site');
    // Use the actual theme logo setting instead of hardcoded path.
    $logo_url = theme_get_setting('logo.url');
    $variables['site_logo'] = $logo_url;
    $variables['site_name'] = $config->get('name');
    $variables['show_logo'] = !empty($logo_url);
  }

  // Add logo variant for system branding block in header based on page type.
  if (isset($variables['plugin_id']) && $variables['plugin_id'] == 'system_branding_block') {
    // Only apply inverted logo to the header region block.
    $block_id = $variables['elements']['#id'] ?? '';
    
    // Default to 'default' variant.
    $logo_variant = 'default';
    
    // Check if this is the header branding block (not footer).
    if ($block_id == 'adesso_cms_theme_brandingderwebsite') {
      // Get the current node to check if it's a landing page.
      $node = \Drupal::request()->attributes->get('node');
      
      // Check if we're on a landing page node.
      if ($node && is_object($node) && method_exists($node, 'bundle')) {
        if ($node->bundle() == 'landing_page') {
          $logo_variant = 'inverted';
        }
      }
    }
    
    // Pass the logo variant to the template.
    $variables['logo_variant'] = $logo_variant;
  }
}

/**
 * Preprocess function for block content template.
 */
function adesso_cms_theme_preprocess_block_content(array &$variables) {
  $block_content = $variables['elements']['#block_content'];

  if ($block_content->bundle() === 'views') {
    // Add wrapper to the paragraph views.
    $views_ref = $block_content->field_views_ref->getValue();
    if (!empty($views_ref[0]['target_id']) && !empty($views_ref[0]['display_id'])) {
      $target_id = Html::cleanCssIdentifier($views_ref[0]['target_id']);
      $display_id = Html::cleanCssIdentifier($views_ref[0]['display_id']);
      $variables['wrapper_class'] = str_replace('-', '_', $target_id . '-' . $display_id . '__wrapper');
    }
  }

  $block_preprocess_function = 'adesso_cms_theme_preprocess_block_content__' . $block_content->bundle();
  if (function_exists($block_preprocess_function)) {
    $block_preprocess_function($variables);
  }
}

/**
 * Implements theme_preprocess_image().
 */
function adesso_cms_theme_preprocess_image(&$variables) {
  if (!empty($variables['attributes']['class']) && is_string($variables['attributes']['class'])) {
    $variables['attributes']['class'] = [$variables['attributes']['class']];
  }
  $variables['attributes']['class'][] = 'w-full h-auto rounded-lg';

  // Add lazy loading for non-critical images.
  if (!_adesso_cms_theme_is_critical_image($variables)) {
    $variables['attributes']['loading'] = 'lazy';
    $variables['attributes']['decoding'] = 'async';
  }

  // Don't add sizes attribute - let responsive image system handle it
  // Responsive images provide their own proper sizes calculation.
}

/**
 * Check if image is critical and should not be lazy loaded.
 */
function _adesso_cms_theme_is_critical_image($variables) {
  // Don't lazy load logos.
  if (isset($variables['style_name']) && strpos($variables['style_name'], 'logo') !== FALSE) {
    return TRUE;
  }

  // Don't lazy load hero images on homepage.
  if (_adesso_cms_theme_is_homepage() && isset($variables['style_name']) && strpos($variables['style_name'], 'hero') !== FALSE) {
    return TRUE;
  }

  // Don't lazy load images above the fold (first 3 images on page)
  static $image_count = 0;
  $image_count++;
  if ($image_count <= 3) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function adesso_cms_theme_theme_suggestions_field_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function adesso_cms_theme_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_node().
 */
function adesso_cms_theme_preprocess_node(array &$variables) {
  if (!empty($variables['elements']['#node']) && is_object($variables['elements']['#node']) && method_exists($variables['elements']['#node'], 'getType')) {
    // Ensure that the node variable exists and is an object.
    $function = __FUNCTION__ . '_' . $variables['elements']['#node']->getType();
    if (function_exists($function)) {
      $function($variables);
    }
  }
}

/**
 * Preprocess function for landing_page nodes.
 *
 * Implements architectural separation: landing page titles are handled
 * by page.html.twig with page-header component using the 'landing' variant.
 */
function adesso_cms_theme_preprocess_node_landing_page(array &$variables) {
  /** @var \Drupal\node\Entity\Node $node */
  $node = $variables['node'];

  // Add theme variables that are needed for the landing-page-header component.
  $config = \Drupal::config('system.site');
  $variables['site_name'] = $config->get('name');
  $variables['logo'] = theme_get_setting('logo.url');
  $variables['front_page'] = '/';

  // Get main menu for navigation using the same logic as _adesso_cms_theme_get_menu_data.
  $variables['main_menu'] = _adesso_cms_theme_get_menu_data();

  // Architectural pattern: Landing page headers are handled by page.html.twig
  // This ensures clean separation and prevents double headers.
  // Mark that this is a landing page for template logic.
  $variables['is_landing_page_content'] = TRUE;

  // Remove title from content area since it's handled by page header.
  if (isset($variables['label'])) {
    // Keep label available but mark it as handled by page template.
    $variables['page_title_handled'] = TRUE;
  }

  // Add helper class for content styling.
  $variables['attributes']['class'][] = 'landing-page-content';
  $variables['attributes']['class'][] = 'has-page-header';
}

/**
 * Implements hook_page_attachments().
 */
function adesso_cms_theme_page_attachments(array &$attachments) {
  // Add Content Security Policy header for external CDN resources and Vite dev server.
  $csp_directives = [
    "default-src 'self'",
    "script-src 'self' 'unsafe-inline' 'unsafe-eval' https://unpkg.com https://cdn.jsdelivr.net https://adesso-cms.ddev.site:5173",
    "style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://unpkg.com https://adesso-cms.ddev.site:5173",
    "font-src 'self' https://fonts.gstatic.com",
    "img-src 'self' data: https:",
    "connect-src 'self' wss://adesso-cms.ddev.site:5173 https://adesso-cms.ddev.site:5173",
    "frame-src 'self'",
    "object-src 'none'",
    "base-uri 'self'",
    "form-action 'self'",
    "frame-ancestors 'self'",
    "manifest-src 'self'",
  ];

  $csp_header = implode('; ', $csp_directives);

  $attachments['#attached']['http_header'][] = [
    'Content-Security-Policy',
    $csp_header,
  ];

  // Add additional security headers.
  $attachments['#attached']['http_header'][] = [
    'X-Content-Type-Options',
    'nosniff',
  ];

  $attachments['#attached']['http_header'][] = [
    'X-Frame-Options',
    'SAMEORIGIN',
  ];

  $attachments['#attached']['http_header'][] = [
    'X-XSS-Protection',
    '1; mode=block',
  ];

  $attachments['#attached']['http_header'][] = [
    'Referrer-Policy',
    'strict-origin-when-cross-origin',
  ];

  // Attach fix for block reference preview when frontend editing is active.
  if (\Drupal::currentUser()->hasPermission('access frontend editing')) {
    $attachments['#attached']['library'][] = 'adesso_cms_theme/fix-block-reference-preview';
  }
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function adesso_cms_theme_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
}

/**
 * Implements hook_preprocess_form().
 */
function adesso_cms_theme_preprocess_form(array &$variables) {
}

/**
 * Implements hook_preprocess_select().
 */
function adesso_cms_theme_preprocess_select(array &$variables) {
}

/**
 * Implements hook_preprocess_field().
 */
function adesso_cms_theme_preprocess_field(array &$variables, $hook) {

}

/**
 * Implements hook_preprocess_details().
 */
function adesso_cms_theme_preprocess_details(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function adesso_cms_theme_theme_suggestions_details_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestions_paragraph_alter().
 */
function adesso_cms_theme_theme_suggestions_paragraph_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function adesso_cms_theme_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'views_view_unformatted__' . $variables['view']->id() . '__' . $variables['view']->current_display;
}

/**
 * Get menu data for navigation templates.
 */
function _adesso_cms_theme_get_menu_data() {
  $menu_tree = \Drupal::menuTree();
  $menu_name = 'main';

  // Build menu tree parameters.
  $parameters = new MenuTreeParameters();
  $parameters->setMaxDepth(3);
  $parameters->onlyEnabledLinks();

  // Load the menu tree.
  $tree = $menu_tree->load($menu_name, $parameters);

  // Transform the tree.
  $manipulators = [
    ['callable' => 'menu.default_tree_manipulators:checkAccess'],
    ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
  ];
  $tree = $menu_tree->transform($tree, $manipulators);

  // Build menu items array.
  $menu_items = [];
  foreach ($tree as $element) {
    $menu_items[] = _adesso_cms_theme_build_menu_item($element);
  }

  return $menu_items;
}

/**
 * Build menu item data structure.
 */
function _adesso_cms_theme_build_menu_item($element) {
  $link = $element->link;
  $options = $link->getOptions();

  $item = [
    'title' => $link->getTitle(),
    'url' => $link->getUrlObject()->toString(),
    'is_current' => $link->getUrlObject()->isRouted() && $link->getUrlObject()->getRouteName() == \Drupal::routeMatch()->getRouteName(),
    'in_active_trail' => $element->inActiveTrail,
    'children' => [],
    'variant' => $options['variant'] ?? 'default',
    'background_color' => $options['background_color'] ?? 'white',
    'featured_collection' => $options['featured_collection'] ?? NULL,
    'featured_position' => $options['featured_position'] ?? 'after',
    'break_column_after' => $options['break_column_after'] ?? FALSE,
    'divider' => $options['divider'] ?? FALSE,
    'icon' => $options['icon'] ?? NULL,
    'image' => $options['image'] ?? NULL,
  ];

  // Build children recursively.
  if ($element->hasChildren) {
    foreach ($element->subtree as $child) {
      $item['children'][] = _adesso_cms_theme_build_menu_item($child);
    }
  }

  return $item;
}

/**
 * Get sites data for multi-site navigation.
 */
function _adesso_cms_theme_get_sites_data() {
  // For now, return basic site data
  // This should be adapted based on your multi-site setup.
  return [
    [
      'handle' => 'default',
      'name' => 'adesso CMS',
      'locale' => 'de',
      'overwrite_name' => NULL,
    ],
  ];
}

/**
 * Check if current page is homepage.
 */
function _adesso_cms_theme_is_homepage() {
  try {
    $current_path = \Drupal::service('path.current')->getPath();
    $front_page = \Drupal::config('system.site')->get('page.front');
    $path_alias_manager = \Drupal::service('path_alias.manager');

    // Check if current path is front page.
    if ($current_path === $front_page) {
      return TRUE;
    }

    // Check if we're on the root path.
    if ($current_path === '/') {
      return TRUE;
    }

    // Check alias.
    $alias = $path_alias_manager->getAliasByPath($current_path);
    if ($alias === $front_page) {
      return TRUE;
    }

    return FALSE;
  }
  catch (Exception $e) {
    // Fail gracefully.
    return FALSE;
  }
}

/**
 * Check if site is in production environment.
 */
function _adesso_cms_theme_is_production() {
  // Check environment variable.
  $environment = getenv('DRUPAL_ENV') ?: 'development';

  // Check if we're not in a development environment.
  if (in_array($environment, ['production', 'prod', 'live'])) {
    return TRUE;
  }

  // Check if debug mode is disabled (another indicator of production)
  $config = \Drupal::config('system.logging');
  if (!$config->get('error_level')) {
    return TRUE;
  }

  // Check if we're not on localhost or development domains.
  $host = \Drupal::request()->getHost();
  $dev_patterns = [
    'localhost',
    '127.0.0.1',
    '.local',
    '.dev',
    '.ddev.site',
    '.test',
  ];

  foreach ($dev_patterns as $pattern) {
    if (strpos($host, $pattern) !== FALSE) {
      return FALSE;
    }
  }

  return TRUE;
}

/**
 *
 */
function adesso_cms_theme_preprocess_image_widget(array &$variables): void {
  $data = &$variables['data'];

  // This prevents image widget templates from rendering preview container HTML
  // to users that do not have permission to access these previews.
  // @todo revisit in https://drupal.org/node/953034
  // @todo revisit in https://drupal.org/node/3114318
  if (isset($data['preview']['#access']) && $data['preview']['#access'] === FALSE) {
    unset($data['preview']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function adesso_cms_theme_preprocess_html(&$variables) {
  if (!isset($variables['attributes']['class'])) {
    $variables['attributes']['class'] = [];
  }

  // Color settings.
  if (theme_get_setting('adesso_cms_theme_enable_color')) {
    $pc = theme_get_setting('adesso_cms_theme_base_primary_color') ?? '#3B71CA';
    $sc = theme_get_setting('adesso_cms_theme_base_secondary_color') ?? '#9FA6B2';
    $tc = theme_get_setting('adesso_cms_theme_base_tertiary_color') ?? '#F9FAFB';
    $bc = theme_get_setting('adesso_cms_theme_body_color') ?? '#1F2937';
    $bgc = theme_get_setting('adesso_cms_theme_body_bg_color') ?? '#FFFFFF';
    $h1c = theme_get_setting('adesso_cms_theme_h1_color') ?? '#1F2937';
    $h2c = theme_get_setting('adesso_cms_theme_h2_color') ?? '#1F2937';
    $h3c = theme_get_setting('adesso_cms_theme_h3_color') ?? '#1F2937';
    $h4c = theme_get_setting('adesso_cms_theme_h4_color') ?? '#1F2937';
    $suc = theme_get_setting('adesso_cms_theme_success_color') ?? '#14A44D';
    $wc = theme_get_setting('adesso_cms_theme_warning_color') ?? '#E4A11B';
    $ec = theme_get_setting('adesso_cms_theme_error_color') ?? '#DC4C64';

    $styles = [
      "--color-primary:$pc;",
      "--color-secondary:$sc;",
      "--color-tertiary:$tc;",
      "--color-body: $bc;",
      "--color-body_bg: $bgc;",
      "--color-h1: $h1c;",
      "--color-h2: $h2c;",
      "--color-h3: $h3c;",
      "--color-h4: $h4c;",
      "--color-success: $suc;",
      "--color-warning: $wc;",
      "--color-error: $ec;",
    ];
    $variables['html_attributes']->setAttribute('style', implode('', $styles));
  }
}

/**
 * Implements hook_preprocess_menu().
 */
function adesso_cms_theme_preprocess_menu__main(array &$variables): void {
  $items = $variables["items"];

  $variables['array_for_sdc'] = processNestedArray($items);
}

/**
 * Process a nested array structure recursively.
 *
 * @param array $items
 *   The input array to process.
 *
 * @return array
 */
function processNestedArray($items): array {
  $result = [];
  // Get the current path.
  $current_path = \Drupal::service('path.current')->getPath();

  // Get the front page path from configuration.
  $front_page = \Drupal::config('system.site')->get('page.front');

  foreach ($items as $item) {
    $newItem = [
      'title' => $item['title'] ?? '',
      'url' => $item['url']?->toString() ?? '#',
      // 'target' => '__self',
      'class' => '',
    ];

    // Add 'active' class if the menu item is in the active trail.
    if (!empty($item['in_active_trail'])) {
      $newItem['class'] = 'active';
    }

    // Add active class if the menu item's URL matches the current path.
    if (!empty($item['url']) && $item['url']->toString() === $current_path) {
      $newItem['class'] = 'active';
    }

    // Ensure Home is active only when on the front page.
    if (($current_path === '/' || $current_path === $front_page) && ($item['url']?->toString() === '/' || $item['url']?->toString() === $front_page)) {
      $newItem['class'] = 'active';
    }

    // Process children recursively if they exist.
    if (!empty($item['below']) && is_array($item['below'])) {
      $newItem['children'] = processNestedArray($item['below']);
    }

    $result[] = $newItem;
  }

  return $result;
}

/**
 * Implements hook_preprocess_page().
 */
function adesso_cms_theme_preprocess_page(array &$variables): void {
  // Load selected header style from theme settings.
  $header_style = theme_get_setting('header_class') ?: 'style1';
  $variables['header_template'] = 'header--' . $header_style;

  // Get the theme setting for fixed header.
  $variables['fixed'] = theme_get_setting('header_fixed');

  // Set the appropriate class based on the setting.
  $variables['header_fixed_class'] = $variables['fixed'] ? 'fixed z-40 w-full' : '';

  // Set the footer template.
  $footer_style = theme_get_setting('footer_class') ?: 'style1';
  $variables['footer_template'] = 'footer--' . $footer_style;

  if (!isset($variables['logo'])) {
    $variables['logo'] = theme_get_setting('logo.url');
  }

  $config = \Drupal::config('system.site');
  $variables['site_name'] = $config->get('name');
  $variables['current_year'] = date('Y');

  // Block-based header system integration
  $variables['use_block_headers'] = theme_get_setting('use_block_headers') ?? TRUE;
  $variables['has_block_headers'] = $variables['use_block_headers'];
}

/**
 *
 */
function adesso_cms_theme_preprocess_menu(array &$variables) {
  $config = \Drupal::config('system.site');
  $variables['site_name'] = $config->get('name');

  // Set logo variable (both site_logo and logo for backward compatibility)
  $logo_url = theme_get_setting('logo.url');
  $variables['site_logo'] = $logo_url;
  $variables['logo'] = $logo_url;

  // Set front page URL.
  $variables['front_page'] = '/';

  // Set show_logo flag.
  $variables['show_logo'] = !empty($logo_url);

  // Pass current node for variant detection.
  $variables['node'] = \Drupal::request()->attributes->get('node');

  // Get the account menu by its machine name.
  $account_menu_name = 'account';

  // Load the menu tree parameters (e.g., top-level only).
  $parameters = new MenuTreeParameters();

  // Load the tree.
  $menu_tree = \Drupal::menuTree()->load($account_menu_name, $parameters);

  // Build the tree into a renderable array.
  $manipulated = \Drupal::menuTree()->build($menu_tree);

  // Optionally, extract only the '#items' part if needed.
  $variables['account_menu'] = $manipulated['#items'] ?? [];

  // Get selected header style for menu twig.
  $header_style = theme_get_setting('header_class');
  $variables['selected__header_template'] = $header_style;

  // Check if the user is logged in.
  $current_user = \Drupal::currentUser();

  // If the user is logged out, remove the "My Account" link from the menu.
  if (!$current_user->isAuthenticated()) {
    foreach ($variables['account_menu'] as $key => $item) {
      // Check for the My Account menu item and unset it if the user is logged out.
      if (isset($item['url']) && $item['url']->getRouteName() === 'user.page') {
        unset($variables['account_menu'][$key]);
      }
    }
  }
}

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function adesso_cms_theme_form_system_theme_settings_alter(&$form, FormStateInterface $form_state, $form_id = NULL) {
  // Work-around for a core bug affecting admin themes. See issue #943212.
  if (isset($form_id)) {
    return;
  }

  $form['header_settings'] = [
    '#type' => 'details',
    '#title' => t('Page Header Settings'),
    '#open' => TRUE,
    '#weight' => -10,
  ];

  $form['header_settings']['use_block_headers'] = [
    '#type' => 'checkbox',
    '#title' => t('Use block-based page headers'),
    '#description' => t('Enable modern block-based page headers. When disabled, falls back to template-based headers. Block-based headers provide better flexibility and content management.'),
    '#default_value' => theme_get_setting('use_block_headers') ?? TRUE,
  ];

  $form['header_settings']['block_header_info'] = [
    '#type' => 'markup',
    '#markup' => '<div class="description">' . t('With block-based headers enabled, page headers are managed through the Block Layout system. Configure header blocks in <a href="@url">Block Layout</a>.', [
      '@url' => '/admin/structure/block',
    ]) . '</div>',
    '#states' => [
      'visible' => [
        ':input[name="use_block_headers"]' => ['checked' => TRUE],
      ],
    ],
  ];

  $form['header_settings']['template_header_warning'] = [
    '#type' => 'markup',
    '#markup' => '<div class="messages messages--warning">' . t('<strong>Template-based headers are deprecated.</strong> Consider migrating to block-based headers for better content management and flexibility.') . '</div>',
    '#states' => [
      'visible' => [
        ':input[name="use_block_headers"]' => ['checked' => FALSE],
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds 'type' to input.html.twig.
 */
function adesso_cms_theme_preprocess_input(&$variables) {
  // Get the input type.
  $type = $variables['element']['#type'] ?? '';
  $variables['type'] = $type;
}

/**
 * Implements hook_preprocess_views_view() for Event Review Dashboard.
 */
function adesso_cms_theme_preprocess_views_view__event_review_dashboard(&$variables) {
  // Attach Event Review Dashboard libraries
  $variables['#attached']['library'][] = 'adesso_cms_theme/event-review-dashboard';
  
  // Add Bruchtal-specific styling classes
  $variables['attributes']['class'][] = 'event-review-dashboard';
  $variables['attributes']['class'][] = 'bruchtal-theme';
  
  // Add skip link for accessibility
  $variables['skip_link'] = [
    '#markup' => '<a href="#event-review-content" class="event-review-skip-link">Springe zum Hauptinhalt des Event Review Dashboards</a>',
  ];
  
  // Add CSRF token for AJAX operations
  $variables['csrf_token'] = \Drupal::csrfToken()->get('event-review-dashboard');
}

/**
 * Implements hook_preprocess_views_view_table() for Event Review Dashboard.
 */
function adesso_cms_theme_preprocess_views_view_table__event_review_dashboard(&$variables) {
  // Add table-specific classes for Event Review Dashboard
  $variables['attributes']['class'][] = 'event-review-table';
  
  // Add accessibility attributes
  $variables['attributes']['role'] = 'table';
  $variables['attributes']['aria-label'] = 'Veranstaltungen zur Überprüfung';
  
  // Enhance header accessibility
  if (isset($variables['header'])) {
    foreach ($variables['header'] as $key => &$header_cell) {
      if ($key === 'views_bulk_operations_bulk_form') {
        $header_cell['attributes']['scope'] = 'col';
        $header_cell['attributes']['aria-label'] = 'Veranstaltungen auswählen';
      } elseif ($key === 'title') {
        $header_cell['attributes']['scope'] = 'col';
        $header_cell['attributes']['aria-sort'] = 'none';
      } elseif ($key === 'moderation_state') {
        $header_cell['attributes']['scope'] = 'col';
        $header_cell['attributes']['aria-label'] = 'Genehmigungsstatus';
      } elseif ($key === 'operations') {
        $header_cell['attributes']['scope'] = 'col';
        $header_cell['attributes']['aria-label'] = 'Verfügbare Aktionen';
      }
    }
  }
  
  // Enhance row accessibility
  if (isset($variables['rows'])) {
    foreach ($variables['rows'] as $row_index => &$row) {
      $row['attributes']['class'][] = 'event-review-row';
      $row['attributes']['role'] = 'row';
      
      if (isset($row['columns'])) {
        foreach ($row['columns'] as $col_key => &$column) {
          $column['attributes']['role'] = 'cell';
          
          // Add specific attributes for different column types
          if ($col_key === 'views_bulk_operations_bulk_form') {
            $column['attributes']['aria-label'] = 'Veranstaltung auswählen';
          } elseif ($col_key === 'moderation_state') {
            $column['attributes']['class'][] = 'status-column';
          } elseif ($col_key === 'operations') {
            $column['attributes']['class'][] = 'actions-column';
          }
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_views_exposed_form() for Event Review Dashboard.
 */
function adesso_cms_theme_preprocess_views_exposed_form__event_review_dashboard(&$variables) {
  // Add accessibility attributes to the exposed form
  $variables['attributes']['role'] = 'search';
  $variables['attributes']['aria-label'] = 'Filter für Veranstaltungen';
  
  // Add form-specific classes
  $variables['attributes']['class'][] = 'event-review-filters';
  $variables['attributes']['class'][] = 'bruchtal-theme';
}

/**
 * Implements hook_preprocess_form() for VBO form.
 */
function adesso_cms_theme_preprocess_form__views_form_event_review_dashboard_page_1(&$variables) {
  // Attach quick action buttons library
  $variables['#attached']['library'][] = 'adesso_cms_theme/quick-action-buttons';
  
  // Add form-specific classes
  $variables['attributes']['class'][] = 'event-review-vbo-form';
  $variables['attributes']['class'][] = 'bruchtal-theme';
  
  // Add accessibility attributes
  $variables['attributes']['role'] = 'form';
  $variables['attributes']['aria-label'] = 'Bulk-Operationen für Veranstaltungen';
}

/**
 * Implements hook_preprocess_field() for moderation state in Event Review Dashboard.
 */
function adesso_cms_theme_preprocess_field__moderation_state(&$variables) {
  // Check if we're in the Event Review Dashboard context
  $view = \Drupal::routeMatch()->getParameter('view_id');
  if ($view === 'event_review_dashboard') {
    // Attach status badge library
    $variables['#attached']['library'][] = 'adesso_cms_theme/status-badge';
    
    // Add field-specific classes
    $variables['attributes']['class'][] = 'event-review-status-field';
  }
}

/**
 * Implements hook_preprocess_field() for operations field in Event Review Dashboard.
 */
function adesso_cms_theme_preprocess_field__operations(&$variables) {
  // Check if we're in the Event Review Dashboard context
  $view = \Drupal::routeMatch()->getParameter('view_id');
  if ($view === 'event_review_dashboard') {
    // Attach quick action buttons library
    $variables['#attached']['library'][] = 'adesso_cms_theme/quick-action-buttons';
    
    // Add field-specific classes
    $variables['attributes']['class'][] = 'event-review-operations-field';
    
    // Add CSRF token for quick actions
    $variables['csrf_token'] = \Drupal::csrfToken()->get('event-review-operations');
  }
}
