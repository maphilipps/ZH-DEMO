{#
/**
 * @file
 * File Upload Preview component template for Infrastructure Damage Report forms.
 *
 * @param {array} files - Array of uploaded files with metadata
 * @param {number} max_files - Maximum number of files allowed (default: 3)
 * @param {string} max_file_size - Maximum file size in human readable format (default: "5 MB")
 * @param {array} allowed_types - List of allowed file types/extensions
 * @param {string} upload_url - Endpoint for file uploads
 * @param {boolean} compact - Smaller layout for mobile devices (default: false)
 * @param {string} modifier - Additional CSS classes
 */
#}
{% set upload_files = files|default([]) %}
{% set max_uploads = max_files|default(3) %}
{% set max_size = max_file_size|default('5 MB') %}
{% set allowed_extensions = allowed_types|default(['jpg', 'jpeg', 'png', 'pdf', 'doc', 'docx']) %}
{% set upload_endpoint = upload_url|default('/upload') %}
{% set is_compact = compact|default(false) %}
{% set upload_modifier = modifier|default('') %}

{# Calculate remaining slots #}
{% set current_files = upload_files|length %}
{% set remaining_slots = max_uploads - current_files %}

{# File type icons configuration #}
{% set file_icons = {
  'image': '<svg class="w-6 h-6 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>',
  'pdf': '<svg class="w-6 h-6 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/></svg>',
  'document': '<svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/></svg>',
  'unknown': '<svg class="w-6 h-6 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13"/></svg>'
} %}

{# Container classes #}
{% set container_classes = [
  'file-upload-preview',
  is_compact ? 'file-upload-preview--compact' : '',
  upload_modifier
]|join(' ')|trim %}

<div class="{{ container_classes }}" x-data="fileUploadPreview()">
  
  {# Upload area #}
  {% if remaining_slots > 0 %}
    <div class="border-2 border-dashed border-gray-300 rounded-lg {{ is_compact ? 'p-4' : 'p-6' }} text-center hover:border-gray-400 transition-colors">
      <input 
        type="file" 
        id="file-upload" 
        class="sr-only"
        multiple
        accept="{{ allowed_extensions|map(ext => '.' ~ ext)|join(',') }}"
        x-ref="fileInput"
        @change="handleFileSelect($event)"
      />
      
      <label for="file-upload" class="cursor-pointer">
        <div class="mb-4">
          <svg class="mx-auto h-{{ is_compact ? '8' : '12' }} w-{{ is_compact ? '8' : '12' }} text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
            <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </div>
        
        <div class="text-sm {{ is_compact ? '' : 'mb-2' }}">
          <span class="font-semibold text-blue-600 hover:text-blue-500">
            Dateien hochladen
          </span>
          <span class="text-gray-600">oder per Drag & Drop</span>
        </div>
        
        <p class="text-xs text-gray-500">
          {{ allowed_extensions|join(', ')|upper }} bis {{ max_size }} 
          (noch {{ remaining_slots }} von {{ max_uploads }} {% if remaining_slots == 1 %}Datei{% else %}Dateien{% endif %})
        </p>
      </label>
    </div>
  {% endif %}

  {# File list #}
  {% if upload_files|length > 0 %}
    <div class="mt-4 space-y-2">
      <h4 class="text-sm font-medium text-gray-900">
        Hochgeladene Dateien ({{ current_files }}/{{ max_uploads }})
      </h4>
      
      <div class="space-y-2">
        {% for file in upload_files %}
          {% set file_id = file.id|default(loop.index) %}
          {% set file_name = file.name|default('Unbekannte Datei') %}
          {% set file_size = file.size|default('0 KB') %}
          {% set file_type = file.type|default('unknown') %}
          {% set preview_url = file.preview_url|default('') %}
          {% set progress = file.upload_progress|default(100) %}
          {% set file_status = file.status|default('completed') %}
          {% set error_msg = file.error_message|default('') %}
          
          {# Determine file icon #}
          {% set icon_key = 'unknown' %}
          {% if file_type starts with 'image/' %}
            {% set icon_key = 'image' %}
          {% elseif file_type == 'application/pdf' or file_name ends with '.pdf' %}
            {% set icon_key = 'pdf' %}
          {% elseif file_type starts with 'application/' or file_name matches '/\\.(doc|docx|txt)$/' %}
            {% set icon_key = 'document' %}
          {% endif %}
          
          <div class="flex items-center p-3 bg-gray-50 rounded-lg border {{ file_status == 'error' ? 'border-red-200 bg-red-50' : 'border-gray-200' }}">
            
            {# File preview/icon #}
            <div class="flex-shrink-0 mr-3">
              {% if preview_url and icon_key == 'image' %}
                <img 
                  src="{{ preview_url }}" 
                  alt="Vorschau {{ file_name }}"
                  class="w-10 h-10 object-cover rounded border border-gray-300"
                  loading="lazy"
                />
              {% else %}
                <div class="w-10 h-10 flex items-center justify-center">
                  {{ file_icons[icon_key]|raw }}
                </div>
              {% endif %}
            </div>

            {# File info #}
            <div class="flex-1 min-w-0">
              <p class="text-sm font-medium text-gray-900 truncate">
                {{ file_name }}
              </p>
              <p class="text-xs text-gray-500">
                {{ file_size }}
                {% if file_status == 'error' and error_msg %}
                  · <span class="text-red-600">{{ error_msg }}</span>
                {% elseif file_status == 'uploading' %}
                  · <span class="text-blue-600">Hochladen... {{ progress }}%</span>
                {% elseif file_status == 'validating' %}
                  · <span class="text-yellow-600">Wird überprüft...</span>
                {% elseif file_status == 'completed' %}
                  · <span class="text-green-600">Erfolgreich hochgeladen</span>
                {% endif %}
              </p>
              
              {# Progress bar for uploading files #}
              {% if file_status == 'uploading' %}
                <div class="mt-1 w-full bg-gray-200 rounded-full h-1.5">
                  <div 
                    class="bg-blue-600 h-1.5 rounded-full transition-all duration-300" 
                    style="width: {{ progress }}%"
                  ></div>
                </div>
              {% endif %}
            </div>

            {# Actions #}
            <div class="flex-shrink-0 ml-3">
              {% if file_status == 'completed' or file_status == 'error' %}
                <button 
                  type="button" 
                  class="text-red-600 hover:text-red-800 p-1"
                  @click="removeFile('{{ file_id }}')"
                  aria-label="Datei {{ file_name }} entfernen"
                >
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                  </svg>
                </button>
              {% elseif file_status == 'uploading' %}
                <button 
                  type="button" 
                  class="text-gray-600 hover:text-gray-800 p-1"
                  @click="cancelUpload('{{ file_id }}')"
                  aria-label="Upload von {{ file_name }} abbrechen"
                >
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                  </svg>
                </button>
              {% endif %}
            </div>
          </div>
        {% endfor %}
      </div>
    </div>
  {% endif %}

  {# Validation messages #}
  <div x-show="validationError" x-text="validationError" class="mt-2 text-sm text-red-600"></div>
</div>

{# Alpine.js component script #}
<script>
document.addEventListener('alpine:init', () => {
  Alpine.data('fileUploadPreview', () => ({
    files: {{ upload_files|json_encode|raw }},
    maxFiles: {{ max_uploads }},
    maxFileSize: '{{ max_size }}',
    allowedTypes: {{ allowed_extensions|json_encode|raw }},
    uploadUrl: '{{ upload_endpoint }}',
    validationError: '',

    handleFileSelect(event) {
      const selectedFiles = Array.from(event.target.files);
      
      // Validate file count
      if (this.files.length + selectedFiles.length > this.maxFiles) {
        this.validationError = `Maximal ${this.maxFiles} Dateien erlaubt. Sie haben bereits ${this.files.length} Datei(en) hochgeladen.`;
        return;
      }

      selectedFiles.forEach(file => this.processFile(file));
      event.target.value = ''; // Reset input
    },

    processFile(file) {
      // Validate file type
      const extension = file.name.split('.').pop().toLowerCase();
      if (!this.allowedTypes.includes(extension)) {
        this.validationError = `Dateityp .${extension} ist nicht erlaubt. Erlaubte Typen: ${this.allowedTypes.join(', ')}`;
        return;
      }

      // Create file object
      const fileObj = {
        id: Date.now() + Math.random(),
        name: file.name,
        size: this.formatFileSize(file.size),
        type: file.type,
        preview_url: '',
        upload_progress: 0,
        status: 'uploading',
        error_message: ''
      };

      // Generate preview for images
      if (file.type.startsWith('image/')) {
        const reader = new FileReader();
        reader.onload = (e) => {
          fileObj.preview_url = e.target.result;
          this.$nextTick(() => this.$forceUpdate());
        };
        reader.readAsDataURL(file);
      }

      this.files.push(fileObj);
      this.validationError = '';

      // Simulate upload process
      this.simulateUpload(fileObj);
    },

    simulateUpload(fileObj) {
      let progress = 0;
      const interval = setInterval(() => {
        progress += Math.random() * 30;
        if (progress >= 100) {
          progress = 100;
          fileObj.upload_progress = progress;
          fileObj.status = 'completed';
          clearInterval(interval);
        } else {
          fileObj.upload_progress = Math.floor(progress);
        }
      }, 200);
    },

    removeFile(fileId) {
      this.files = this.files.filter(file => file.id != fileId);
      this.validationError = '';
    },

    cancelUpload(fileId) {
      this.removeFile(fileId);
    },

    formatFileSize(bytes) {
      if (bytes === 0) return '0 Bytes';
      const k = 1024;
      const sizes = ['Bytes', 'KB', 'MB', 'GB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
    }
  }));
});
</script>