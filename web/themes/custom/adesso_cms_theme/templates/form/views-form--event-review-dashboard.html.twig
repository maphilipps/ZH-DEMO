{#
/**
 * @file
 * VBO form template for Event Review Dashboard
 * Swiss-compliant bulk operations styling
 *
 * Available variables:
 * - attributes: HTML attributes for the form
 * - form: The form elements
 */
#}

<form{{ attributes.addClass('event-review-vbo-form', 'space-y-6') }}>
  
  {# Main content area with table #}
  <div class="bg-white shadow-sm rounded-lg border border-gray-200 overflow-hidden">
    
    {# Header with bulk actions toolbar #}
    {% if form['header'] %}
      <div class="px-6 py-4 bg-gray-50 border-b border-gray-200">
        <div class="flex items-center justify-between">
          <div class="flex items-center space-x-4">
            {% if form['select_all'] %}
              <div class="flex items-center">
                {{ form['select_all'] }}
                <label for="{{ form['select_all']['#id'] }}" class="ml-2 text-sm font-medium text-gray-700">
                  Alle auswählen
                </label>
              </div>
            {% endif %}
            
            {# Selected count indicator #}
            <div id="selected-count" class="text-sm text-gray-600 hidden">
              <span id="selected-number">0</span> ausgewählte Events
            </div>
          </div>
          
          {# Action selection and submit #}
          <div class="flex items-center space-x-3">
            {% if form['action'] %}
              <div class="flex items-center space-x-2">
                <label for="{{ form['action']['#id'] }}" class="text-sm font-medium text-gray-700">
                  Aktion:
                </label>
                {{ form['action'] }}
              </div>
            {% endif %}
            
            {% if form['submit'] %}
              <div>
                {{ form['submit'] }}
              </div>
            {% endif %}
          </div>
        </div>
        
        {# Bulk action confirmation message #}
        <div id="bulk-action-warning" class="hidden mt-3 p-3 bg-yellow-50 border border-yellow-200 rounded-md">
          <div class="flex">
            <svg class="h-5 w-5 text-yellow-400 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 15.5c-.77.833.192 2.5 1.732 2.5z"></path>
            </svg>
            <div class="text-sm text-yellow-800">
              Sie sind dabei, eine Aktion auf <span id="warning-count">0</span> Veranstaltungen anzuwenden. 
              Bitte bestätigen Sie diese Aktion.
            </div>
          </div>
        </div>
      </div>
    {% endif %}
    
    {# Table content #}
    <div class="vbo-table-wrapper">
      {{ form['output'] }}
    </div>
    
    {# Footer with pagination and additional actions #}
    {% if form['pager'] or form['footer'] %}
      <div class="px-6 py-4 bg-gray-50 border-t border-gray-200">
        {% if form['pager'] %}
          <div class="flex items-center justify-between">
            <div class="text-sm text-gray-700">
              {{ form['pager'] }}
            </div>
          </div>
        {% endif %}
        
        {% if form['footer'] %}
          <div class="mt-3">
            {{ form['footer'] }}
          </div>
        {% endif %}
      </div>
    {% endif %}
  </div>
  
  {# Hidden form elements #}
  <div class="sr-only">
    {{ form|without('header', 'output', 'select_all', 'action', 'submit', 'pager', 'footer') }}
  </div>

</form>

{# Enhanced VBO JavaScript #}
<script>
(function() {
  'use strict';

  document.addEventListener('DOMContentLoaded', function() {
    initializeVBOEnhancements();
  });

  function initializeVBOEnhancements() {
    const form = document.querySelector('.event-review-vbo-form');
    if (!form) return;

    const selectAllCheckbox = form.querySelector('input[name="select_all"]');
    const rowCheckboxes = form.querySelectorAll('input[name^="views_bulk_operations_bulk_form"]');
    const selectedCountElement = document.getElementById('selected-count');
    const selectedNumberElement = document.getElementById('selected-number');
    const warningElement = document.getElementById('bulk-action-warning');
    const warningCountElement = document.getElementById('warning-count');
    const actionSelect = form.querySelector('select[name="action"]');
    const submitButton = form.querySelector('input[type="submit"]');

    // Update selected count
    function updateSelectedCount() {
      const checkedBoxes = form.querySelectorAll('input[name^="views_bulk_operations_bulk_form"]:checked');
      const count = checkedBoxes.length;
      
      if (selectedNumberElement) {
        selectedNumberElement.textContent = count;
      }
      
      if (selectedCountElement) {
        selectedCountElement.classList.toggle('hidden', count === 0);
      }
      
      // Update submit button state
      if (submitButton) {
        submitButton.disabled = count === 0 || !actionSelect?.value;
        submitButton.classList.toggle('opacity-50', submitButton.disabled);
        submitButton.classList.toggle('cursor-not-allowed', submitButton.disabled);
      }
      
      // Update warning
      if (warningElement && warningCountElement) {
        warningCountElement.textContent = count;
        warningElement.classList.toggle('hidden', count === 0);
      }
    }

    // Select all functionality
    if (selectAllCheckbox) {
      selectAllCheckbox.addEventListener('change', function() {
        rowCheckboxes.forEach(checkbox => {
          checkbox.checked = this.checked;
        });
        updateSelectedCount();
      });
    }

    // Individual checkbox functionality
    rowCheckboxes.forEach(checkbox => {
      checkbox.addEventListener('change', function() {
        // Update select all state
        if (selectAllCheckbox) {
          const checkedCount = form.querySelectorAll('input[name^="views_bulk_operations_bulk_form"]:checked').length;
          selectAllCheckbox.checked = checkedCount === rowCheckboxes.length;
          selectAllCheckbox.indeterminate = checkedCount > 0 && checkedCount < rowCheckboxes.length;
        }
        
        updateSelectedCount();
      });
    });

    // Action select change
    if (actionSelect) {
      actionSelect.addEventListener('change', updateSelectedCount);
    }

    // Form submission with confirmation
    if (submitButton) {
      form.addEventListener('submit', function(e) {
        const checkedBoxes = form.querySelectorAll('input[name^="views_bulk_operations_bulk_form"]:checked');
        const action = actionSelect?.value;
        
        if (checkedBoxes.length === 0) {
          e.preventDefault();
          alert('Bitte wählen Sie mindestens eine Veranstaltung aus.');
          return;
        }
        
        if (!action) {
          e.preventDefault();
          alert('Bitte wählen Sie eine Aktion aus.');
          return;
        }
        
        // Confirmation for potentially destructive actions
        const actionText = actionSelect?.selectedOptions[0]?.textContent || action;
        const confirmMessage = `Möchten Sie wirklich "${actionText}" auf ${checkedBoxes.length} Veranstaltung(en) anwenden?`;
        
        if (!confirm(confirmMessage)) {
          e.preventDefault();
          return;
        }
        
        // Show loading state
        submitButton.disabled = true;
        submitButton.value = 'Wird verarbeitet...';
        
        // Add loading spinner
        const spinner = document.createElement('span');
        spinner.innerHTML = `
          <svg class="inline w-4 h-4 mr-2 animate-spin" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
        `;
        submitButton.parentNode.insertBefore(spinner, submitButton);
      });
    }

    // Initial count update
    updateSelectedCount();
    
    // Enhanced accessibility
    enhanceAccessibility();
  }

  function enhanceAccessibility() {
    const form = document.querySelector('.event-review-vbo-form');
    if (!form) return;

    // Add ARIA labels and descriptions
    const selectAllCheckbox = form.querySelector('input[name="select_all"]');
    if (selectAllCheckbox) {
      selectAllCheckbox.setAttribute('aria-label', 'Alle Veranstaltungen auswählen');
      selectAllCheckbox.setAttribute('aria-describedby', 'select-all-description');
      
      // Add hidden description
      const description = document.createElement('div');
      description.id = 'select-all-description';
      description.className = 'sr-only';
      description.textContent = 'Wählt alle sichtbaren Veranstaltungen für Bulk-Operationen aus';
      selectAllCheckbox.parentNode.appendChild(description);
    }

    // Add ARIA labels to row checkboxes
    const rowCheckboxes = form.querySelectorAll('input[name^="views_bulk_operations_bulk_form"]');
    rowCheckboxes.forEach((checkbox, index) => {
      const row = checkbox.closest('tr');
      const titleCell = row?.querySelector('td:nth-child(2)'); // Assuming title is in 2nd column
      const titleText = titleCell?.textContent?.trim() || `Veranstaltung ${index + 1}`;
      
      checkbox.setAttribute('aria-label', `Auswählen: ${titleText}`);
    });

    // Add keyboard navigation
    addKeyboardNavigation(form);
  }

  function addKeyboardNavigation(form) {
    // Keyboard shortcuts
    document.addEventListener('keydown', function(e) {
      // Only apply within the VBO form context
      if (!form.contains(e.target)) return;
      
      // Ctrl+A to select all
      if (e.ctrlKey && e.key === 'a') {
        e.preventDefault();
        const selectAllCheckbox = form.querySelector('input[name="select_all"]');
        if (selectAllCheckbox) {
          selectAllCheckbox.checked = !selectAllCheckbox.checked;
          selectAllCheckbox.dispatchEvent(new Event('change'));
        }
      }
      
      // Escape to deselect all
      if (e.key === 'Escape') {
        const selectAllCheckbox = form.querySelector('input[name="select_all"]');
        const rowCheckboxes = form.querySelectorAll('input[name^="views_bulk_operations_bulk_form"]');
        
        if (selectAllCheckbox) selectAllCheckbox.checked = false;
        rowCheckboxes.forEach(checkbox => checkbox.checked = false);
        
        // Update UI
        const event = new Event('change');
        if (selectAllCheckbox) selectAllCheckbox.dispatchEvent(event);
        if (rowCheckboxes[0]) rowCheckboxes[0].dispatchEvent(event);
      }
    });
  }

})();
</script>

{# Custom CSS for VBO enhancements #}
<style>
  /* VBO form styling */
  .event-review-vbo-form .form-item {
    margin-bottom: 0;
  }
  
  .event-review-vbo-form select,
  .event-review-vbo-form input[type="submit"] {
    @apply rounded-md border-gray-300 shadow-sm focus:border-red-500 focus:ring-red-500;
  }
  
  .event-review-vbo-form input[type="submit"] {
    @apply bg-red-600 text-white hover:bg-red-700 px-4 py-2 font-medium transition-colors;
    min-height: 44px;
    min-width: 44px;
  }
  
  .event-review-vbo-form input[type="submit"]:disabled {
    @apply bg-gray-400 hover:bg-gray-400 cursor-not-allowed;
  }
  
  /* Checkbox styling */
  .event-review-vbo-form input[type="checkbox"] {
    @apply w-4 h-4 text-red-600 border-gray-300 rounded focus:ring-red-500 focus:ring-2;
    min-height: 44px;
    min-width: 44px;
  }
  
  /* High contrast mode */
  @media (prefers-contrast: high) {
    .event-review-vbo-form {
      border: 2px solid;
    }
    
    .event-review-vbo-form input,
    .event-review-vbo-form select,
    .event-review-vbo-form button {
      border: 2px solid;
    }
  }
  
  /* Focus visible enhancements */
  .event-review-vbo-form input:focus-visible,
  .event-review-vbo-form select:focus-visible,
  .event-review-vbo-form button:focus-visible {
    outline: 2px solid #dc2626;
    outline-offset: 2px;
  }
</style>