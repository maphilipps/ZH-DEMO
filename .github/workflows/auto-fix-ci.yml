name: Auto Fix CI Failures

on:
    workflow_run:
        workflows: ["CI"]
        types:
            - completed

permissions:
    contents: write
    pull-requests: write
    actions: read
    issues: write
    id-token: write # Required for OIDC token exchange

jobs:
    auto-fix:
        if: |
            github.event.workflow_run.conclusion == 'failure' &&
            github.event.workflow_run.pull_requests[0] &&
            !startsWith(github.event.workflow_run.head_branch, 'claude-auto-fix-ci-')
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.workflow_run.head_branch }}
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Setup git identity
              run: |
                  git config --global user.email "claude[bot]@users.noreply.github.com"
                  git config --global user.name "claude[bot]"

            - name: Create fix branch
              id: branch
              run: |
                  BRANCH_NAME="claude-auto-fix-ci-${{ github.event.workflow_run.head_branch }}-${{ github.run_id }}"
                  git checkout -b "$BRANCH_NAME"
                  echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

            - name: Get CI failure details
              id: failure_details
              uses: actions/github-script@v7
              with:
                  script: |
                      const run = await github.rest.actions.getWorkflowRun({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        run_id: ${{ github.event.workflow_run.id }}
                      });
                      
                      const jobs = await github.rest.actions.listJobsForWorkflowRun({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        run_id: ${{ github.event.workflow_run.id }}
                      });
                      
                      const failedJobs = jobs.data.jobs.filter(job => job.conclusion === 'failure');
                      
                      let errorLogs = [];
                      for (const job of failedJobs) {
                        const logs = await github.rest.actions.downloadJobLogsForWorkflowRun({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          job_id: job.id
                        });
                        errorLogs.push({
                          jobName: job.name,
                          logs: logs.data
                        });
                      }
                      
                      return {
                        runUrl: run.data.html_url,
                        failedJobs: failedJobs.map(j => j.name),
                        errorLogs: errorLogs
                      };

            - name: Setup MCP Configuration
              run: |
                mkdir -p /tmp/mcp-config
                cat > /tmp/mcp-config/mcp-servers.json << 'EOF'
                {
                  "mcpServers": {
                    "github": {
                      "command": "docker",
                      "args": [
                        "run", "-i", "--rm",
                        "-e", "GITHUB_PERSONAL_ACCESS_TOKEN",
                        "ghcr.io/github/github-mcp-server:sha-efef8ae"
                      ],
                      "env": {
                        "GITHUB_PERSONAL_ACCESS_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
                      }
                    }
                  }
                }
                EOF

            - name: Create CI fix prompt
              run: |
                mkdir -p /tmp/claude-prompts
                cat > /tmp/claude-prompts/ci-fix-prompt.txt << 'EOF'
                You are a CI/CD debugging specialist for ZH-DEMO, a Drupal 11.2.2 project with German government compliance requirements.
                
                ## Project Context:
                - **Tech Stack**: Drupal 11.2.2, DDEV, TailwindCSS v4, Vite, Storybook, Node.js 20, PHP 8.3
                - **Build Tools**: Bun, npm, Composer, DDEV containerized development
                - **Compliance**: German government standards (eCH-0059), WCAG 2.1 AA
                - **Testing**: Frontend tests, PHP standards, accessibility validation
                
                ## CI Failure Details:
                - **Failed CI Run**: ${{ fromJSON(steps.failure_details.outputs.result).runUrl }}
                - **Failed Jobs**: ${{ join(fromJSON(steps.failure_details.outputs.result).failedJobs, ', ') }}
                - **PR Number**: ${{ github.event.workflow_run.pull_requests[0].number }}
                - **Branch**: ${{ steps.branch.outputs.branch_name }}
                - **Base Branch**: ${{ github.event.workflow_run.head_branch }}
                - **Repository**: ${{ github.repository }}
                
                ## Error Logs:
                ${{ toJSON(fromJSON(steps.failure_details.outputs.result).errorLogs) }}
                
                ## Your Task:
                Analyze the CI failure and implement fixes following these priorities:
                
                ### ðŸ”´ Critical Issues (Fix First):
                1. **Build Failures**: Compilation errors, missing dependencies
                2. **Test Failures**: Broken unit tests, integration test issues
                3. **Security Issues**: Dependency vulnerabilities, code security problems
                4. **Compliance Violations**: German government standard violations
                
                ### ðŸŸ¡ High Priority Issues:
                1. **Code Standards**: PHP coding standards, ESLint violations
                2. **Performance Issues**: Bundle size, optimization problems
                3. **Accessibility Issues**: WCAG 2.1 AA compliance failures
                4. **Documentation Issues**: Missing or outdated docs
                
                ## Common ZH-DEMO CI Issues & Fixes:
                
                ### **Frontend Build Issues**:
                - **esbuild version conflicts**: Use `ddev npm` commands instead of plain `npm`
                - **Vite configuration**: Check vite.config.ts for library mode vs browser mode
                - **TailwindCSS v4**: Verify @theme configuration, avoid utility class overrides
                - **Storybook integration**: Check .storybook/main.js viteFinal configuration
                
                ### **PHP/Drupal Issues**:
                - **Coding Standards**: Use ./vendor/bin/phpcs for standards compliance
                - **PHPStan Issues**: Fix static analysis violations
                - **Composer Dependencies**: Run composer install with proper flags
                
                ### **Testing Issues**:
                - **Node.js Tests**: Check for proper test environment setup
                - **Browser Tests**: Ensure headless browser configuration
                - **Accessibility Tests**: Verify WCAG 2.1 AA compliance patterns
                
                ### **German Compliance Issues**:
                - **Brand Violations**: Fix "ADESSO" â†’ "adesso" (always lowercase)
                - **Accessibility**: Ensure WCAG 2.1 AA compliance for government standards
                - **Security**: Remove XSS vulnerabilities (|raw filters in Twig)
                
                ## Implementation Steps:
                1. **Analyze Logs**: Identify root cause of failures
                2. **Fix Code**: Use Edit, MultiEdit, Write tools to implement fixes
                3. **Update Dependencies**: Fix package.json, composer.json if needed
                4. **Commit Changes**: Create fix commit with descriptive message
                5. **Update CLAUDE.md**: Document new prevention rules if applicable
                
                ## Available Tools:
                - **File Operations**: Edit, MultiEdit, Write, Read, Grep, Glob, LS
                - **Shell Commands**: Bash (git, bun, npm, npx, composer, ddev)
                - **GitHub Integration**: MCP GitHub tools for PR management
                
                **Fix the CI failures systematically and commit the changes with a descriptive message.**
                Apply German compliance requirements and document any new learnings.
                EOF

            - name: Fix CI failures with Claude
              id: claude
              uses: anthropics/claude-code-action@v1
              with:
                  prompt: $(cat /tmp/claude-prompts/ci-fix-prompt.txt)
                  anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
                  claude_args: |
                    --allowedTools Edit,MultiEdit,Write,Read,Glob,Grep,LS,Bash,mcp__github__get_pull_request,mcp__github__update_pull_request
                    --mcp-config /tmp/mcp-config/mcp-servers.json
                    --max-turns 8