#!/bin/bash

# Planning Lane ‚Üí GitHub Issues Integration Script
# Automatically creates GitHub issues from Planning Lane outputs

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CLAUDE_DIR="$(dirname "$SCRIPT_DIR")"
PLANNING_DIR="$CLAUDE_DIR/lanes/planning"
BUILDING_DIR="$CLAUDE_DIR/lanes/building"
LOG_FILE="$CLAUDE_DIR/planning-github.log"

# Colors
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

# Logging function
log_planning() {
    local level="$1"
    local message="$2"
    local timestamp=$(date -Iseconds)
    echo "[$timestamp] [$level] $message" >> "$LOG_FILE"
}

# Function to create GitHub issue from planning document
create_github_issue_from_planning() {
    local planning_file="$1"
    local filename=$(basename "$planning_file" .md)
    
    echo -e "${BLUE}üìã Processing Planning Document: $filename${NC}"
    
    if [[ ! -f "$planning_file" ]]; then
        echo -e "${RED}‚ùå Planning file not found: $planning_file${NC}"
        return 1
    fi
    
    # Extract title and content
    local title=$(head -1 "$planning_file" | sed 's/^# *//')
    if [[ -z "$title" ]]; then
        title="Planning: $filename"
    fi
    
    # Create issue body from planning content
    local body_file=$(mktemp)
    cat > "$body_file" <<EOF
## Planning Lane Output

**Generated from**: \`$planning_file\`
**Lane**: Planning ‚Üí Building  
**Type**: Architecture/Implementation Plan

---

$(cat "$planning_file")

---

## Building Lane Tasks
- [ ] Review planning document
- [ ] Implement planned features
- [ ] Create tests for implementation
- [ ] Update documentation
- [ ] Hand off to Review Lane

## Labels
- planning-lane
- architecture
- gpzh-demo
- drupal-11

**Auto-generated by Planning Lane** ü§ñ
EOF

    # Create GitHub issue using gh CLI
    echo -e "${BLUE}üöÄ Creating GitHub Issue...${NC}"
    local issue_url
    issue_url=$(gh issue create \
        --title "$title" \
        --body-file "$body_file" \
        --label "planning-lane,architecture,gpzh-demo,drupal-11" \
        --assignee "@me")
    
    if [[ $? -eq 0 ]]; then
        echo -e "${GREEN}‚úÖ GitHub Issue created: $issue_url${NC}"
        log_planning "SUCCESS" "Created issue: $issue_url from $planning_file"
        
        # Create handoff file for Building Lane
        create_building_handoff "$planning_file" "$issue_url"
    else
        echo -e "${RED}‚ùå Failed to create GitHub issue${NC}"
        log_planning "ERROR" "Failed to create issue from $planning_file"
        return 1
    fi
    
    rm -f "$body_file"
}

# Function to create Building Lane handoff
create_building_handoff() {
    local planning_file="$1"
    local issue_url="$2"
    local filename=$(basename "$planning_file" .md)
    local handoff_file="$BUILDING_DIR/github-issue-${filename}.md"
    
    cat > "$handoff_file" <<EOF
# Building Lane: $filename

**GitHub Issue**: $issue_url
**Planning Document**: $planning_file
**Status**: Ready for Implementation
**Created**: $(date -Iseconds)

## Implementation Instructions

This task comes from the Planning Lane via GitHub Issues integration.

1. **Review the GitHub Issue**: $issue_url
2. **Follow Planning Document**: Review $planning_file
3. **Implement Features**: According to architectural plan
4. **Create Tests**: Ensure comprehensive testing
5. **Update Knowledge**: Add learnings to .claude/learnings.json
6. **Hand off to Review**: Create PR when complete

## Compounding Engineering Notes

- Apply lessons from previous implementations
- Document new patterns discovered
- Update CLAUDE.md with architectural decisions
- Ensure Swiss compliance requirements are met

## Building Lane Checklist

- [ ] Issue reviewed and understood
- [ ] Planning document analyzed
- [ ] Architecture implemented
- [ ] Tests written and passing
- [ ] Documentation updated
- [ ] Learnings captured
- [ ] PR ready for Review Lane

EOF

    echo -e "${GREEN}‚úÖ Building Lane handoff created: $handoff_file${NC}"
    log_planning "INFO" "Created building handoff: $handoff_file"
}

# Function to process all planning documents
process_all_planning_docs() {
    echo -e "${BLUE}üîÑ Processing All Planning Documents${NC}"
    
    local processed=0
    for planning_file in "$PLANNING_DIR"/*.md; do
        if [[ -f "$planning_file" ]]; then
            local basename_file=$(basename "$planning_file")
            
            # Skip template and documentation files
            if [[ "$basename_file" =~ ^(README|CLAUDE|template|task-template)\.md$ ]]; then
                continue
            fi
            
            # Skip if already processed (check for existing handoff)
            local handoff_check="$BUILDING_DIR/github-issue-$(basename "$planning_file" .md).md"
            if [[ -f "$handoff_check" ]]; then
                echo -e "${YELLOW}‚ö†Ô∏è  Skipping already processed: $basename_file${NC}"
                continue
            fi
            
            create_github_issue_from_planning "$planning_file"
            processed=$((processed + 1))
        fi
    done
    
    echo -e "${GREEN}‚úÖ Processed $processed planning documents${NC}"
    log_planning "INFO" "Batch processing completed: $processed documents"
}

# Function to sync planning updates to GitHub
sync_planning_updates() {
    local planning_file="$1"
    local filename=$(basename "$planning_file" .md)
    
    echo -e "${BLUE}üîÑ Syncing Planning Updates for: $filename${NC}"
    
    # Find existing issue
    local existing_issue=$(gh issue list --search "Planning: $filename" --json number,title --jq '.[0].number')
    
    if [[ -n "$existing_issue" && "$existing_issue" != "null" ]]; then
        echo -e "${YELLOW}üìù Updating existing issue #$existing_issue${NC}"
        
        local comment_file=$(mktemp)
        cat > "$comment_file" <<EOF
## Planning Update

**Updated**: $(date -Iseconds)
**Planning Document**: Updated

---

$(cat "$planning_file")

---

**Auto-updated by Planning Lane** üîÑ
EOF
        
        gh issue comment "$existing_issue" --body-file "$comment_file"
        rm -f "$comment_file"
        
        log_planning "INFO" "Updated issue #$existing_issue for $planning_file"
    else
        echo -e "${BLUE}üìã Creating new issue (no existing found)${NC}"
        create_github_issue_from_planning "$planning_file"
    fi
}

# Main execution
main() {
    echo -e "${BLUE}ü§ñ Planning Lane ‚Üí GitHub Issues Integration${NC}"
    echo -e "${BLUE}============================================${NC}"
    echo ""
    
    # Initialize log
    echo "$(date -Iseconds) - Starting planning-to-github integration" > "$LOG_FILE"
    
    # Check if gh CLI is available
    if ! command -v gh &> /dev/null; then
        echo -e "${RED}‚ùå GitHub CLI (gh) not found. Please install: brew install gh${NC}"
        log_planning "ERROR" "GitHub CLI not available"
        exit 1
    fi
    
    # Check if authenticated
    if ! gh auth status &> /dev/null; then
        echo -e "${RED}‚ùå GitHub CLI not authenticated. Run: gh auth login${NC}"
        log_planning "ERROR" "GitHub CLI not authenticated"
        exit 1
    fi
    
    case "${1:-process}" in
        "process"|"")
            process_all_planning_docs
            ;;
        "sync")
            if [[ -n "${2:-}" ]]; then
                sync_planning_updates "$2"
            else
                echo -e "${RED}‚ùå Please specify a planning file to sync${NC}"
                exit 1
            fi
            ;;
        "watch")
            echo -e "${BLUE}üëÅÔ∏è  Watching Planning Lane for changes...${NC}"
            log_planning "INFO" "Started watching planning directory"
            
            # Use fswatch if available, otherwise basic loop
            if command -v fswatch &> /dev/null; then
                fswatch -o "$PLANNING_DIR" | while read; do
                    echo -e "${YELLOW}üìù Changes detected in Planning Lane${NC}"
                    process_all_planning_docs
                done
            else
                echo -e "${YELLOW}‚ö†Ô∏è  fswatch not found. Install with: brew install fswatch${NC}"
                echo -e "${BLUE}üí° Running in basic mode - manual processing only${NC}"
            fi
            ;;
        "help"|"-h"|"--help")
            echo "Usage: $0 [process|sync FILE|watch|help]"
            echo ""
            echo "Commands:"
            echo "  process         - Process all planning documents to GitHub issues (default)"
            echo "  sync FILE       - Sync specific planning document to GitHub"
            echo "  watch          - Watch planning directory for changes"
            echo "  help           - Show this help"
            ;;
        *)
            echo "Unknown command: $1"
            echo "Use '$0 help' for usage information"
            exit 1
            ;;
    esac
}

# Execute main function
main "$@"