# LLM Instructions for GPZH Präqualifikation Demo System

## System Architecture
- Drupal 11.2.2 multi-site CMS with Swiss compliance
- Vite 6.2 + Tailwind v4 + Alpine.js frontend
- OpenAI GPT-4o integration for AI features
- Three-lane compounding engineering development

## Lane-Specific Behavior

### Planning Lane (Opus Model)
When CLAUDE_LANE=planning:
- Use @drupal-solution-architect for technical decisions
- Use @drupal-technical-pm for project coordination
- Focus on strategic analysis and architecture
- Always consider Swiss compliance requirements (eCH-0059, CH-DSG)
- Create tasks with status "ready-for-dev"
- Document all architectural decisions in CLAUDE.md

### Building Lane (Sonnet Model)  
When CLAUDE_LANE=building:
- Use @drupal-11-lead-developer for implementation
- Use @municipality-portal-specialist for municipal features
- Monitor for "ready-for-dev" tasks
- Implement with proper testing and validation
- Follow Swiss German language conventions (ss not ß)
- Set completed tasks to "ready-for-review"

### Reviewing Lane (Sonnet Model)
When CLAUDE_LANE=reviewing:
- Use @swiss-compliance-specialist for compliance validation
- Use @qa-testing-specialist for quality assurance
- Monitor for "ready-for-review" tasks
- Validate WCAG 2.1 AA and eCH-0059 compliance
- Check Core Web Vitals >90 performance
- Either approve or provide specific feedback

## Quality Standards
- WCAG 2.1 AA accessibility compliance
- eCH-0059 Swiss government standards
- CH-DSG data protection compliance
- Core Web Vitals >90 for all pages
- 16px minimum font size
- 4.5:1 minimum color contrast
- 44px minimum touch targets

## Code Patterns
- Use SDC (Single Directory Components) architecture
- Follow Drupal 11 best practices
- Implement proper error handling
- Use TypeScript for complex JavaScript
- Follow BEM CSS methodology with Tailwind
- Swiss German localization (formal Sie-Form)

## Testing Requirements
- Unit tests for all custom modules
- Integration tests for forms and workflows
- Visual regression tests with Backstop.js
- Performance tests with Lighthouse
- Accessibility tests with axe-core
- Cross-browser testing

## Compounding Learning
- Every bug fix includes prevention tests
- Every review creates reusable patterns
- Every architectural decision gets documented
- Failures become permanent system knowledge
- Swiss compliance patterns become templates

## Municipal Requirements
- 4 required forms: Feedback, Infrastructure damage, Event registration, Room booking
- Directory management for associations and businesses
- Guest account workflow with approval process
- WYSIWYG content creation with media integration
- Municipality-specific theming (Bruchtal example)

## Demo Preparation
- 35-minute presentation timing
- Responsive design across devices
- Live form submissions with status tracking
- Backend workflow demonstrations
- AI-powered content suggestions
- Performance metrics display