#!/bin/bash
#ddev-generated

## Description: Run Unlighthouse with Issue #18 compliance (--demo-check|--mobile|--desktop)
## Usage: unlighthouse [--demo-check|--mobile|--desktop] [folder] [config]
## Example: "ddev unlighthouse --demo-check" or "ddev unlighthouse local"
## ExecRaw: true

set -euo pipefail

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'  
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

print_info() { echo -e "${BLUE}[Unlighthouse]${NC} $1"; }
print_success() { echo -e "${GREEN}[Unlighthouse]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[Unlighthouse]${NC} $1"; }
print_error() { echo -e "${RED}[Unlighthouse]${NC} $1"; }

export NODE_TLS_REJECT_UNAUTHORIZED='0'

# Default values using existing structure
FOLDER="local"
FILE="unlighthouse.ts"
MODE="full"

# Issue #18 requirements - Parse special flags first
case "${1:-}" in
    --demo-check)
        print_info "🎯 Demo Check Mode - Quick validation (<5 minutes)"
        FILE="demo-check.ts"
        MODE="demo"
        shift
        ;;
    --mobile)
        print_info "📱 Mobile-Only Mode - 375x667 viewport"
        FILE="mobile-only.ts"
        MODE="mobile"
        shift
        ;;
    --desktop)
        print_info "💻 Desktop-Only Mode - 1920x1080 viewport"
        FILE="desktop-only.ts"
        MODE="desktop"
        shift
        ;;
    --help|-h)
        echo ""
        echo "🚀 ZH-DEMO Unlighthouse Scanner (Issue #18 Implementation)"
        echo "========================================================="
        echo ""
        echo "Usage:"
        echo "  ddev unlighthouse [OPTIONS] [folder] [config]"
        echo ""
        echo "Issue #18 Options:"
        echo "  --demo-check     Quick demo validation (<5 minutes)"
        echo "  --mobile         Mobile-only scan (375x667)"
        echo "  --desktop        Desktop-only scan (1920x1080)" 
        echo "  --help           Show this help"
        echo ""
        echo "Examples:"
        echo "  ddev unlighthouse                 # Full scan"
        echo "  ddev unlighthouse --demo-check    # Demo validation"
        echo "  ddev unlighthouse --mobile        # Mobile scan"
        echo "  ddev unlighthouse local           # Use local config"
        echo ""
        echo "🇨🇭 Swiss Compliance:"
        echo "  ✓ WCAG 2.1 AA (95% threshold)"
        echo "  ✓ eCH-0059 standards"
        echo "  ✓ Performance (90% threshold)"
        echo ""
        echo "📊 Results: https://zh-demo.ddev.site:5678"
        echo ""
        exit 0
        ;;
esac

# Handle remaining arguments (folder/file)
FOLDER=${1:-$FOLDER}
FILE=${2:-$FILE}

# Build config path - check tests directory first
CONFIG_PATH="./tests/unlighthouse/$FILE"

# Fallback to old structure if new doesn't exist
if [ ! -f "$CONFIG_PATH" ]; then
    CONFIG_PATH="./config/$FOLDER/$FILE"
    # If still not found, try tests/unlighthouse/local
    if [ ! -f "$CONFIG_PATH" ]; then
        CONFIG_PATH="./tests/unlighthouse/local/$FILE"
    fi
fi

# Validate config exists
if [ ! -f "$CONFIG_PATH" ]; then
    print_error "Configuration not found: $CONFIG_PATH"
    print_warning "Available configs:"
    find ./tests/unlighthouse/ -name "*.ts" 2>/dev/null | head -5 || echo "  None found"
    exit 1
fi

print_info "🇨🇭 Swiss Compliance Mode: WCAG 2.1 AA + eCH-0059"
print_info "📋 Config: $CONFIG_PATH"
print_info "🌐 UI: https://zh-demo.ddev.site:5678"

# Create output directory
mkdir -p "./reports/unlighthouse"

# Run unlighthouse with proper config
print_info "🚀 Starting scan..."

if unlighthouse --config-file="$CONFIG_PATH" --output-path="./reports/unlighthouse" "${@:3}"; then
    print_success "✅ Scan completed!"
    print_success "📊 Reports: ./reports/unlighthouse"
    
    if [ "$MODE" = "demo" ]; then
        print_success "🎯 Demo validation ready for presentation!"
    fi
else
    print_error "❌ Scan failed"
    exit 1
fi