# Drupal 11 & DrupalCMS Best Practices for Modern Development

This document contains curated best practices for working with Drupal 11, Single Directory Components (SDC), DrupalCMS distribution, and modern Drupal development workflows.

## Drupal 11 Overview & Key Features (2025)

### System Requirements
- **PHP**: 8.3+ (required for Drupal 11)
- **Database**: MySQL 8.0+ or MariaDB 10.6+ (use mysql57 module for older versions)
- **Composer**: 2.7.0+ (mandatory due to security fixes)

### Major New Features in Drupal 11

#### 1. Recipes (Experimental)
- Pre-configured bundles of functionality for rapid feature deployment
- Ready-made thematic packages of modules and settings
- Install with single command: Apply predefined recipes to add capabilities instantly
- Examples: Basic page content type, document media type, editorial workflow

#### 2. Single Directory Components (SDC) - Core Feature
- All component files (CSS, JavaScript, templates, configuration) in one directory
- Improves maintainability, reduces cognitive load
- Better organization than scattered layers and subsystems
- Native support in Drupal Core starting from 10.3

#### 3. Automatic Updates
- Update Drupal core from administrative dashboard
- Automatic patch-level updates (e.g., 11.0.0 to 11.0.1)
- Managed by Cron task runner
- Focus on security and stability

#### 4. Enhanced Navigation Module
- Modern vertical left-aligned toolbar
- Collapsible design for screen space optimization
- Simplified interface for non-technical users
- Currently experimental, reaching full stability soon

#### 5. Workspaces Module (Stable)
- Create independent copies of production website
- Edit and test without affecting live site
- Deploy workspace changes to production
- Perfect for content staging and testing

### Performance Improvements
- Enhanced caching strategies reducing server load
- Optimized database queries for faster data retrieval
- Better JavaScript and CSS handling
- Improved page rendering and user experience

## Single Directory Components (SDC) Best Practices

### Directory Structure Requirements
```
components/
├── atoms/
├── molecules/
└── organisms/
    └── my-component/
        ├── my-component.component.yml
        ├── my-component.twig
        ├── my-component.css
        └── my-component.js
```

### Essential Files
1. **Required**: `{NAME}.component.yml` - Component metadata and configuration
2. **Required**: `{NAME}.twig` - Template file (use `.twig`, not `.html.twig`)
3. **Optional**: CSS and JavaScript files

### Schema Best Practices
- **Mandatory for modules**, optional for themes
- Enables component overrides and form generation
- Early problem detection through validation
- Future compatibility with contributed modules

### Usage Patterns
- **Use `include()`**: When no slots or arbitrary HTML properties needed
- **Use `{% embed %}`**: When populating slots with custom content
- Follow defined data structures for consistency

### Development Goals
- Create reusable UI elements similar to Twig templates
- Avoid unnecessary replacements or redundant efforts
- Strategic component use within site themes
- Component-based architecture for maintainability

## DrupalCMS vs Drupal Core

### Drupal Core
- **Target Audience**: Developers and technical users
- **Approach**: Minimalist, highly customizable framework
- **Use Cases**: Custom web applications, high-traffic websites, complex integrations
- **Benefits**: Complete control over architecture and design
- **Considerations**: Requires technical expertise, longer setup time

### DrupalCMS Distribution
- **Target Audience**: Marketers, content creators, non-technical users
- **Launch**: January 15, 2025
- **Approach**: Ready-to-use distribution with pre-configured modules
- **Use Cases**: Small to medium businesses, content-driven websites
- **Benefits**: Shorter "Time to Value", rapid deployment
- **Considerations**: Less customization flexibility

### When to Choose Each
- **Choose Drupal Core**: Need extensive customization, complex requirements, developer-led projects
- **Choose DrupalCMS**: Quick setup needed, non-technical team, standard functionality sufficient

## Modern Development Workflow

### Component-Based Development
- Move common styles to base HTML elements for reusability
- Build consistency across components
- Accelerating development speed as component library grows
- Self-contained, maintainable code organization

### API-First Architecture
- Enhanced support for RESTful API, JSON:API, and GraphQL
- Perfect for headless CMS setups
- Central content management with distributed delivery
- Cross-platform and multi-device content distribution

### Deployment Workflow Best Practices
1. Make changes in development environment
2. Export configuration changes to version-controllable files
3. Commit code and configuration to version control
4. Synchronize files to live server
5. Run database updates (update.php)
6. Import configuration changes

### Content Moderation States
- **Default Editorial Workflow**: Draft, Published, Archived
- Custom moderation states for specific approval processes
- Enhanced moderation interface for ease of use
- Reduced complexity in content state management

## Security Best Practices (2025)

### Core Security Principles
- Keep Drupal core and modules updated (use automatic updates)
- Implement proper user permissions and roles
- Use HTTPS everywhere
- Regular security audits and monitoring
- Follow Drupal security guidelines
- Never commit secrets or keys to repository

### Access Control
- Principle of least privilege
- Regular review of user permissions
- Multi-factor authentication when possible
- Secure password policies

## Performance Optimization

### Caching Strategies
- Leverage Drupal 11's enhanced caching mechanisms
- Implement proper cache invalidation
- Use CDN for static assets
- Database query optimization

### Asset Management
- Optimize JavaScript and CSS handling
- Image optimization and responsive images
- Critical CSS and above-the-fold optimization
- Bundle splitting for better loading

## Development Environment Setup

### Recommended Tools
- **DDEV**: Local development environment
- **Composer**: Dependency management
- **Drush**: Command-line administration
- **Storybook**: Component development and documentation
- **Git**: Version control with proper workflow

### Quality Assurance
- **PHP CodeSniffer**: Code standards compliance
- **PHPStan**: Static analysis
- **PHPUnit**: Automated testing
- **ESLint**: JavaScript code quality
- **Stylelint**: CSS/SCSS code quality

## Migration and Update Strategies

### From Drupal 10 to 11
- Ensure PHP 8.3+ compatibility
- Update dependencies via Composer
- Test automatic update functionality
- Validate component compatibility
- Review custom code for deprecated functions

### Continuous Integration
- Automated testing pipelines
- Code quality checks
- Security scanning
- Performance testing
- Deployment automation

## Future-Proofing Strategies

### Staying Current
- Monitor Drupal 11 minor releases (every 6 months)
- Participate in community discussions
- Follow official Drupal announcements
- Plan for DrupalCMS adoption (January 2025)

### Architecture Decisions
- Component-first design approach
- API-driven development
- Progressive decoupling strategies
- Scalability planning

## Community Resources

### Official Documentation
- drupal.org/docs - Comprehensive documentation
- drupal.org/project/sdc - Single Directory Components module
- API documentation for developers
- Community-contributed tutorials and guides

### Development Tools
- Drupal Console for code generation
- Debugging tools (Devel module, Xdebug)
- Performance profiling tools
- Security audit tools

This guide represents current best practices as of 2025 and should be regularly updated as the Drupal ecosystem evolves.