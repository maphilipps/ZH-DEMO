name: Review Lane with Learnings Integration

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to review'
        required: true
        type: string

jobs:
  review-with-learnings:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Load Compounding Engineering Knowledge
      id: load-learnings
      run: |
        echo "üß† Loading Learnings from .claude/learnings.json"
        
        if [[ -f ".claude/learnings.json" ]]; then
          echo "LEARNINGS_AVAILABLE=true" >> $GITHUB_OUTPUT
          echo "learnings-content<<EOF" >> $GITHUB_OUTPUT
          cat .claude/learnings.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "LEARNINGS_AVAILABLE=false" >> $GITHUB_OUTPUT
        fi
        
        # Load Swiss compliance requirements
        if [[ -f ".claude/docs/swiss-compliance.md" ]]; then
          echo "swiss-compliance<<EOF" >> $GITHUB_OUTPUT
          cat .claude/docs/swiss-compliance.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi
        
        # Load GPZH requirements
        if [[ -f "CLAUDE.md" ]]; then
          echo "gpzh-requirements<<EOF" >> $GITHUB_OUTPUT
          grep -A 20 "## üéØ Demo Segments Preparation" CLAUDE.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi

    - name: Run Quality Checks with Learning Context
      id: quality-checks
      run: |
        echo "üîç Running Quality Checks with Compounding Engineering Context"
        
        # Run standard checks
        npm run lint 2>&1 | tee lint-results.txt || echo "Lint check completed with issues"
        npm run test 2>&1 | tee test-results.txt || echo "Tests completed with issues"
        
        # Check for Swiss compliance patterns
        echo "üá®üá≠ Checking Swiss Compliance Patterns"
        
        COMPLIANCE_ISSUES=""
        
        # Check for √ü character (should use ss in Swiss German)
        if grep -r "√ü" web/themes/ 2>/dev/null; then
          COMPLIANCE_ISSUES+="‚ùå Swiss German violation: Found √ü character (use ss instead)\n"
        fi
        
        # Check for informal addressing (should use Sie-Form)
        if grep -ri "du\|deine\|dir" web/themes/ 2>/dev/null; then
          COMPLIANCE_ISSUES+="‚ùå Swiss German violation: Informal addressing detected (use Sie-Form)\n"
        fi
        
        # Check minimum font size (16px for accessibility)
        if grep -r "font-size.*1[0-5]px\|font-size.*[0-9]px" web/themes/ 2>/dev/null; then
          COMPLIANCE_ISSUES+="‚ö†Ô∏è  Accessibility: Font sizes below 16px detected\n"
        fi
        
        echo -e "$COMPLIANCE_ISSUES"
        
        if [[ -n "$COMPLIANCE_ISSUES" ]]; then
          echo "HAS_COMPLIANCE_ISSUES=true" >> $GITHUB_OUTPUT
          echo "compliance-issues<<EOF" >> $GITHUB_OUTPUT
          echo -e "$COMPLIANCE_ISSUES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "HAS_COMPLIANCE_ISSUES=false" >> $GITHUB_OUTPUT
        fi

    - name: Analyze Changes Against Learnings
      id: analyze-learnings
      if: steps.load-learnings.outputs.LEARNINGS_AVAILABLE == 'true'
      run: |
        echo "üéØ Analyzing Changes Against Previous Learnings"
        
        # Get changed files
        CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
        
        echo "üìÑ Changed Files:"
        echo "$CHANGED_FILES"
        
        LEARNING_VIOLATIONS=""
        
        # Check against known patterns from learnings
        if echo "$CHANGED_FILES" | grep -q "package-lock.json"; then
          if [[ $(git diff ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} --name-status | grep -c "^D.*package-lock.json") -gt 0 ]]; then
            LEARNING_VIOLATIONS+="üö® CRITICAL: package-lock.json deletion detected (Lesson from PR #12)\n"
            LEARNING_VIOLATIONS+="   ‚Üí This breaks CI/CD builds and was identified as critical failure pattern\n"
          fi
        fi
        
        # Check for form-related changes (GPZH requirement)
        if echo "$CHANGED_FILES" | grep -q "webform\|form"; then
          LEARNING_VIOLATIONS+="‚úÖ Form changes detected - ensure all 4 GPZH demo forms remain functional\n"
          LEARNING_VIOLATIONS+="   ‚Üí Required: Feedback, Infrastructure damage, Event registration, Room booking\n"
        fi
        
        # Check for theme changes
        if echo "$CHANGED_FILES" | grep -q "themes/"; then
          LEARNING_VIOLATIONS+="üé® Theme changes detected - validate Bruchtal demo municipality styling\n"
        fi
        
        if [[ -n "$LEARNING_VIOLATIONS" ]]; then
          echo "HAS_LEARNING_VIOLATIONS=true" >> $GITHUB_OUTPUT
          echo "learning-violations<<EOF" >> $GITHUB_OUTPUT
          echo -e "$LEARNING_VIOLATIONS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "HAS_LEARNING_VIOLATIONS=false" >> $GITHUB_OUTPUT
        fi

    - name: Create Review Comment with Learnings
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Build comprehensive review comment
          let reviewComment = `## ü§ñ Review Lane Analysis with Compounding Engineering\n\n`;
          
          reviewComment += `### üìä Quality Checks\n`;
          
          // Add lint results
          if (fs.existsSync('lint-results.txt')) {
            const lintResults = fs.readFileSync('lint-results.txt', 'utf8');
            reviewComment += `<details><summary>üîç Lint Results</summary>\n\n\`\`\`\n${lintResults}\n\`\`\`\n</details>\n\n`;
          }
          
          // Add test results  
          if (fs.existsSync('test-results.txt')) {
            const testResults = fs.readFileSync('test-results.txt', 'utf8');
            reviewComment += `<details><summary>üß™ Test Results</summary>\n\n\`\`\`\n${testResults}\n\`\`\`\n</details>\n\n`;
          }
          
          // Add Swiss compliance issues
          if ('${{ steps.quality-checks.outputs.HAS_COMPLIANCE_ISSUES }}' === 'true') {
            reviewComment += `### üá®üá≠ Swiss Compliance Issues\n`;
            reviewComment += `${{ steps.quality-checks.outputs.compliance-issues }}\n\n`;
          }
          
          // Add learning violations
          if ('${{ steps.analyze-learnings.outputs.HAS_LEARNING_VIOLATIONS }}' === 'true') {
            reviewComment += `### üß† Compounding Engineering Analysis\n`;
            reviewComment += `${{ steps.analyze-learnings.outputs.learning-violations }}\n\n`;
          }
          
          // Add GPZH context
          reviewComment += `### üéØ GPZH Demo Context\n`;
          reviewComment += `**Presentation Requirements Check:**\n`;
          reviewComment += `- [ ] All 4 required forms functional\n`;
          reviewComment += `- [ ] Bruchtal municipality theme intact\n`;
          reviewComment += `- [ ] Swiss compliance maintained\n`;
          reviewComment += `- [ ] Core Web Vitals >90 validated\n`;
          reviewComment += `- [ ] Responsive design preserved\n\n`;
          
          // Add learnings context if available
          if ('${{ steps.load-learnings.outputs.LEARNINGS_AVAILABLE }}' === 'true') {
            reviewComment += `### üìö Applied Learnings\n`;
            reviewComment += `This review incorporates lessons from previous PRs and compounding engineering patterns.\n\n`;
          }
          
          reviewComment += `---\n**ü§ñ Generated by Review Lane with Compounding Engineering** | `;
          reviewComment += `[Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
          
          // Create the comment
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: reviewComment
          });

    - name: Update Learning System
      if: always()
      run: |
        echo "üìö Updating Learning System with Review Results"
        
        # Create review learning entry
        REVIEW_ENTRY=$(cat <<EOF
        {
          "timestamp": "$(date -Iseconds)",
          "type": "pr_review",
          "pr_number": "${{ github.event.pull_request.number }}",
          "compliance_issues": "${{ steps.quality-checks.outputs.HAS_COMPLIANCE_ISSUES }}",
          "learning_violations": "${{ steps.analyze-learnings.outputs.HAS_LEARNING_VIOLATIONS }}",
          "files_changed": $(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | wc -l),
          "reviewer": "github-actions[bot]",
          "compounding_applied": true
        }
        EOF
        )
        
        # Save review learning (would normally update .claude/learnings.json but that requires push permissions)
        mkdir -p .github/review-learnings
        echo "$REVIEW_ENTRY" > .github/review-learnings/review-${{ github.event.pull_request.number }}.json
        
        echo "‚úÖ Review learning captured for future compounding"

    - name: Validate Demo Requirements
      run: |
        echo "üéØ Validating GPZH Demo Requirements"
        
        # Check if demo forms still exist and are accessible
        if [[ -d "config/sync" ]]; then
          FORM_COUNT=$(ls config/sync/webform.webform.*.yml 2>/dev/null | wc -l)
          echo "üìã Webforms found: $FORM_COUNT"
          
          if [[ $FORM_COUNT -ge 4 ]]; then
            echo "‚úÖ Sufficient webforms for demo (‚â•4 required)"
          else
            echo "‚ö†Ô∏è  Warning: Only $FORM_COUNT webforms found, GPZH demo requires 4"
            exit 1
          fi
        fi
        
        # Check Bruchtal theme integrity
        if [[ -d "web/themes/custom" ]]; then
          echo "üé® Theme structure intact"
        else
          echo "‚ö†Ô∏è  Warning: Custom theme directory not found"
        fi
        
        echo "‚úÖ Demo requirements validation completed"