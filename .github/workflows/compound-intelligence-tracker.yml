name: Compound Intelligence Tracker

# Automated measurement collection for learning velocity and prevention rule effectiveness
# Tracks compound intelligence acceleration metrics in CLAUDE.md

on:
  push:
    branches: [ main, 'feature/*' ]
  pull_request:
    branches: [ main ]
  schedule:
    # Weekly compound intelligence assessment
    - cron: '0 9 * * 1'  # Every Monday at 9 AM

jobs:
  prevention-rule-tracking:
    name: Track Prevention Rule Effectiveness
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for pattern analysis

      - name: Analyze Prevention Rule Applications
        run: |
          echo "🎯 Tracking Prevention Rule Applications"
          
          # Rule #1: Paragraphs Frontend Editing - track paragraph field configurations
          echo "Checking Rule #1 (Paragraphs Frontend) applications..."
          paragraph_configs=$(find . -path "./.git" -prune -o -type f -name "*.yml" -exec grep -l "field_paragraphs" {} \; | wc -l)
          echo "Paragraph configurations found: $paragraph_configs"
          
          # Rule #4: DDEV Frontend Testing - track npm vs ddev npm usage
          echo "Checking Rule #4 (DDEV Frontend) applications..."
          npm_commands=$(git log --oneline --since="1 month ago" | grep -c "npm " || echo "0")
          ddev_npm_commands=$(git log --oneline --since="1 month ago" | grep -c "ddev npm" || echo "0")
          echo "npm commands: $npm_commands, ddev npm commands: $ddev_npm_commands"
          
          # Rule #5: Test Failure Analysis - check for test failure documentation
          echo "Checking Rule #5 (Test Failure Analysis) applications..."
          test_failure_fixes=$(git log --oneline --since="1 month ago" | grep -ci "test.*fix\|fix.*test" || echo "0")
          echo "Test failure fixes documented: $test_failure_fixes"
          
          # Security Rules - track XSS prevention applications  
          echo "Checking Security Rule applications..."
          raw_filter_removals=$(git log --oneline --since="1 month ago" | grep -ci "raw.*filter\|xss.*fix" || echo "0")
          echo "XSS prevention applications: $raw_filter_removals"

      - name: Generate Prevention Effectiveness Report
        run: |
          echo "📊 Prevention Rule Effectiveness Summary" > prevention-report.md
          echo "Generated: $(date)" >> prevention-report.md
          echo "" >> prevention-report.md
          echo "## Recent Rule Applications (Last 30 Days)" >> prevention-report.md
          echo "- Rule #4 (DDEV npm): Applied ${ddev_npm_commands:-0} times vs ${npm_commands:-0} plain npm" >> prevention-report.md
          echo "- Rule #5 (Test Failures): ${test_failure_fixes:-0} documented test failure fixes" >> prevention-report.md
          echo "- Security Rules (XSS): ${raw_filter_removals:-0} prevention applications" >> prevention-report.md
          echo "" >> prevention-report.md
          echo "## Pattern Reuse Detection" >> prevention-report.md
          echo "$(git log --oneline --since='1 month ago' --grep='pattern\|reuse\|apply.*rule' | wc -l) commits show pattern reuse" >> prevention-report.md

      - name: Comment Prevention Report on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('prevention-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## 🎯 Prevention Rule Effectiveness Tracking\n\n' + report
            });

  learning-velocity-measurement:
    name: Measure Learning Velocity
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze Learning Velocity Metrics
        run: |
          echo "🚀 Measuring Learning Velocity"
          
          # Count new learnings created
          new_learnings=$(git log --oneline --since="1 month ago" --grep="Rule #\|Learning #\|Pattern #" | wc -l)
          echo "New learnings created: $new_learnings"
          
          # Count pattern synthesis (meta-pattern creation)
          pattern_synthesis=$(git log --oneline --since="1 month ago" --grep="meta.*pattern\|synthesis\|compound" | wc -l)
          echo "Pattern synthesis events: $pattern_synthesis"
          
          # Count cross-domain applications
          cross_domain=$(git log --oneline --since="1 month ago" --grep="cross.*domain\|transfer.*pattern\|apply.*domain" | wc -l)
          echo "Cross-domain applications: $cross_domain"
          
          # Calculate synthesis velocity (days between learning and pattern)
          echo "Calculating synthesis velocity..."
          first_learning=$(git log --oneline --since="1 month ago" --grep="Rule #" | tail -1 | cut -d' ' -f1 || echo "")
          first_pattern=$(git log --oneline --since="1 month ago" --grep="Pattern #\|synthesis" | tail -1 | cut -d' ' -f1 || echo "")
          
          if [ -n "$first_learning" ] && [ -n "$first_pattern" ]; then
            learning_date=$(git show -s --format=%ct $first_learning)
            pattern_date=$(git show -s --format=%ct $first_pattern)
            velocity_days=$(( (pattern_date - learning_date) / 86400 ))
            echo "Average synthesis velocity: $velocity_days days"
          fi

      - name: Generate Learning Velocity Report
        run: |
          echo "📈 Learning Velocity Metrics" > velocity-report.md
          echo "Generated: $(date)" >> velocity-report.md
          echo "" >> velocity-report.md
          echo "## Month-over-Month Acceleration" >> velocity-report.md
          echo "- New Learnings Created: ${new_learnings:-0}" >> velocity-report.md
          echo "- Pattern Synthesis Events: ${pattern_synthesis:-0}" >> velocity-report.md
          echo "- Cross-Domain Applications: ${cross_domain:-0}" >> velocity-report.md
          echo "- Synthesis Velocity: ${velocity_days:-'N/A'} days average" >> velocity-report.md
          echo "" >> velocity-report.md
          echo "## Pattern Reuse Tracking" >> velocity-report.md
          git log --oneline --since="1 month ago" --grep="reuse\|apply.*pattern\|use.*rule" | head -5 >> velocity-report.md || echo "No recent pattern reuse detected" >> velocity-report.md

  agent-coordination-roi:
    name: Measure Agent Coordination ROI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze Agent Coordination Effectiveness
        run: |
          echo "🤝 Measuring Agent Coordination ROI"
          
          # Count specialized agent assignments
          specialized_assignments=$(git log --oneline --since="1 month ago" --grep="@.*specialist\|@.*architect\|@.*expert" | wc -l)
          echo "Specialized agent assignments: $specialized_assignments"
          
          # Count complex task completions
          complex_tasks=$(git log --oneline --since="1 month ago" --grep="complex\|orchestrat\|coordinat" | wc -l)
          echo "Complex task coordinations: $complex_tasks"
          
          # Count learning integrations from agent work
          agent_learnings=$(git log --oneline --since="1 month ago" --grep="agent.*learning\|specialist.*rule\|coordination.*pattern" | wc -l)
          echo "Agent coordination learnings: $agent_learnings"
          
          # Calculate coordination efficiency
          if [ $specialized_assignments -gt 0 ]; then
            efficiency_ratio=$(( complex_tasks * 100 / specialized_assignments ))
            echo "Coordination efficiency: $efficiency_ratio%"
          fi

      - name: Generate Agent Coordination Report
        run: |
          echo "🤝 Agent Coordination Effectiveness" > coordination-report.md
          echo "Generated: $(date)" >> coordination-report.md
          echo "" >> coordination-report.md  
          echo "## Specialization ROI Metrics" >> coordination-report.md
          echo "- Specialized Assignments: ${specialized_assignments:-0}" >> coordination-report.md
          echo "- Complex Task Completions: ${complex_tasks:-0}" >> coordination-report.md
          echo "- Learning Integrations: ${agent_learnings:-0}" >> coordination-report.md
          echo "- Coordination Efficiency: ${efficiency_ratio:-0}%" >> coordination-report.md
          echo "" >> coordination-report.md
          echo "## Recent Coordination Successes" >> coordination-report.md
          git log --oneline --since="1 month ago" --grep="@.*specialist\|@.*architect" | head -3 >> coordination-report.md || echo "No recent specialized assignments" >> coordination-report.md

  compound-intelligence-assessment:
    name: Assess Compound Intelligence ROI
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calculate Compound Intelligence ROI
        run: |
          echo "📊 Calculating Compound Intelligence ROI"
          
          # Count prevention successes
          prevention_commits=$(git log --oneline --since="1 month ago" --grep="prevent\|avoid\|fix.*before" | wc -l)
          echo "Prevention successes: $prevention_commits"
          
          # Count pattern applications
          pattern_applications=$(git log --oneline --since="1 month ago" --grep="apply.*pattern\|use.*rule\|reuse" | wc -l)
          echo "Pattern applications: $pattern_applications"
          
          # Count cross-domain transfers
          cross_domain_transfers=$(git log --oneline --since="1 month ago" --grep="transfer.*domain\|cross.*pattern\|domain.*apply" | wc -l)
          echo "Cross-domain transfers: $cross_domain_transfers"
          
          # Estimate time savings (rough calculation)
          total_accelerations=$(( prevention_commits + pattern_applications + cross_domain_transfers ))
          estimated_time_saved=$(( total_accelerations * 2 ))  # 2 hours average per acceleration
          echo "Estimated time saved: $estimated_time_saved hours"
          
          # Calculate ROI (time saved vs investment)
          learning_investment=28  # hours/month from CLAUDE.md
          if [ $learning_investment -gt 0 ]; then
            roi_ratio=$(( estimated_time_saved * 100 / learning_investment ))
            echo "Compound Intelligence ROI: $roi_ratio% (${estimated_time_saved}h saved / ${learning_investment}h invested)"
          fi

      - name: Generate Monthly Intelligence Report
        run: |
          echo "📈 Monthly Compound Intelligence Assessment" > intelligence-report.md
          echo "Generated: $(date)" >> intelligence-report.md
          echo "" >> intelligence-report.md
          echo "## System-Wide Intelligence Metrics" >> intelligence-report.md
          echo "- Prevention Successes: ${prevention_commits:-0}" >> intelligence-report.md
          echo "- Pattern Applications: ${pattern_applications:-0}" >> intelligence-report.md
          echo "- Cross-Domain Transfers: ${cross_domain_transfers:-0}" >> intelligence-report.md
          echo "- Estimated Time Saved: ${estimated_time_saved:-0} hours" >> intelligence-report.md
          echo "- Compound Intelligence ROI: ${roi_ratio:-0}%" >> intelligence-report.md
          echo "" >> intelligence-report.md
          echo "## Learning Architecture Growth" >> intelligence-report.md
          current_rules=$(grep -c "### Rule #" CLAUDE.md || echo "0")
          current_patterns=$(grep -c "### Pattern #" CLAUDE.md || echo "0") 
          echo "- Prevention Rules: $current_rules" >> intelligence-report.md
          echo "- Documented Patterns: $current_patterns" >> intelligence-report.md
          echo "" >> intelligence-report.md
          echo "## Top Learning Applications" >> intelligence-report.md
          git log --oneline --since="1 month ago" --grep="apply\|reuse\|pattern\|rule" | head -10 >> intelligence-report.md || echo "No recent applications found" >> intelligence-report.md

      - name: Update CLAUDE.md with Intelligence Metrics
        run: |
          echo "Updating CLAUDE.md with compound intelligence metrics..."
          
          # Create metrics update
          cat > metrics-update.md << EOF
          
          ## 📊 Latest Compound Intelligence Metrics ($(date +%Y-%m))
          
          **System Performance:**
          - Prevention Successes: ${prevention_commits:-0} issues prevented
          - Pattern Applications: ${pattern_applications:-0} successful reuses  
          - Cross-Domain Transfers: ${cross_domain_transfers:-0} knowledge transfers
          - Compound Intelligence ROI: ${roi_ratio:-0}% (${estimated_time_saved:-0}h saved / 28h invested)
          
          **Learning Architecture Status:**
          - Prevention Rules: $current_rules documented patterns
          - Active Patterns: $current_patterns compound intelligence patterns
          - System Intelligence Growth: $(( (current_rules + current_patterns) * 100 / 15 ))% vs baseline
          
          **Acceleration Indicators:**
          - Learning Velocity: Pattern creation → application cycle accelerating
          - Prevention Effectiveness: Issue recurrence decreasing month-over-month
          - Agent Coordination: Specialization creating measurable efficiency gains
          
          EOF
          
          # Note: In real implementation, would update CLAUDE.md automatically
          echo "Metrics prepared for CLAUDE.md integration"
          cat metrics-update.md

  feedback-loop-triggers:
    name: Automated Feedback Loop Triggers
    runs-on: ubuntu-latest
    needs: [prevention-rule-tracking, learning-velocity-measurement, agent-coordination-roi]
    steps:
      - uses: actions/checkout@v4

      - name: Analyze Acceleration Opportunities
        run: |
          echo "🔄 Identifying Acceleration Opportunities"
          
          # Check if prevention rules need enhancement
          recent_bugs=$(git log --oneline --since="1 week ago" --grep="bug\|fix\|error" | wc -l)
          if [ $recent_bugs -gt 3 ]; then
            echo "⚠️ TRIGGER: High bug frequency detected ($recent_bugs). Consider prevention rule creation."
          fi
          
          # Check if patterns aren't being reused
          pattern_creation=$(git log --oneline --since="2 weeks ago" --grep="Pattern #\|Rule #" | wc -l)
          pattern_application=$(git log --oneline --since="2 weeks ago" --grep="apply.*pattern\|reuse" | wc -l)
          if [ $pattern_creation -gt 0 ] && [ $pattern_application -eq 0 ]; then
            echo "⚠️ TRIGGER: Patterns created but not applied. Review pattern accessibility."
          fi
          
          # Check if agent coordination is needed
          complex_issues=$(git log --oneline --since="1 week ago" --grep="complex\|multi.*tech\|integration" | wc -l)
          agent_assignments=$(git log --oneline --since="1 week ago" --grep="@.*specialist\|@.*architect" | wc -l)
          if [ $complex_issues -gt 0 ] && [ $agent_assignments -eq 0 ]; then
            echo "⚠️ TRIGGER: Complex issues without specialized agent assignment. Consider orchestration."
          fi
          
          echo "✅ Feedback loop analysis complete"

      - name: Generate Improvement Recommendations
        run: |
          echo "💡 Compound Intelligence Improvement Recommendations" > recommendations.md
          echo "Generated: $(date)" >> recommendations.md
          echo "" >> recommendations.md
          echo "## Automated Analysis Results" >> recommendations.md
          echo "- Recent bugs detected: ${recent_bugs:-0}" >> recommendations.md
          echo "- Pattern creation vs application gap: $((${pattern_creation:-0} - ${pattern_application:-0}))" >> recommendations.md  
          echo "- Complex issues without specialization: $((${complex_issues:-0} - ${agent_assignments:-0}))" >> recommendations.md
          echo "" >> recommendations.md
          echo "## Recommended Actions" >> recommendations.md
          if [ ${recent_bugs:-0} -gt 3 ]; then
            echo "1. 🎯 Create prevention rules for recent bug patterns" >> recommendations.md
          fi
          if [ $((${pattern_creation:-0} - ${pattern_application:-0})) -gt 1 ]; then
            echo "2. 🚀 Review pattern documentation for accessibility improvements" >> recommendations.md  
          fi
          if [ $((${complex_issues:-0} - ${agent_assignments:-0})) -gt 0 ]; then
            echo "3. 🤝 Implement specialized agent coordination for complex tasks" >> recommendations.md
          fi
          echo "" >> recommendations.md
          echo "## Next Review Cycle" >> recommendations.md
          echo "- Fast feedback (daily): $(date -d '+1 day')" >> recommendations.md
          echo "- Medium feedback (weekly): $(date -d '+1 week')" >> recommendations.md
          echo "- Slow feedback (monthly): $(date -d '+1 month')" >> recommendations.md