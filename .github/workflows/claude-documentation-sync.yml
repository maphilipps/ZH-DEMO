name: Claude Documentation Sync & Generation

on:
  push:
    branches: [main]
    paths:
      - 'web/themes/custom/adesso_cms_theme/src/**'
      - 'web/modules/custom/**'
      - 'web/themes/custom/adesso_cms_theme/stories/**'
      - 'CLAUDE.md'
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'web/themes/custom/adesso_cms_theme/src/**'
      - 'web/modules/custom/**'
      - 'web/themes/custom/adesso_cms_theme/stories/**'
  schedule:
    # Weekly documentation review and updates
    - cron: '0 10 * * 2'  # Tuesdays at 10 AM
  workflow_dispatch:
    inputs:
      doc_type:
        description: 'Documentation type to generate/update'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - storybook
        - api-docs
        - component-docs
        - claude-learnings
        - user-guides

jobs:
  sync-documentation:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'web/themes/custom/adesso_cms_theme/package-lock.json'

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          tools: composer:2

      - name: Install dependencies
        run: |
          # Install theme dependencies
          cd web/themes/custom/adesso_cms_theme
          npm ci
          
          # Install Drupal dependencies
          cd ${{ github.workspace }}
          composer install --no-dev --optimize-autoloader --no-interaction

      - name: Analyze codebase for documentation needs
        run: |
          echo "📚 Analyzing codebase for documentation opportunities..."
          mkdir -p /tmp/doc-analysis
          
          # Analyze Storybook stories
          echo "=== Storybook Analysis ===" | tee /tmp/doc-analysis/storybook.txt
          find web/themes/custom/adesso_cms_theme/stories -name "*.stories.js" -o -name "*.stories.ts" | \
            wc -l | tee -a /tmp/doc-analysis/storybook.txt
          
          # Analyze components without documentation
          echo "=== Undocumented Components ===" | tee /tmp/doc-analysis/undocumented.txt
          find web/themes/custom/adesso_cms_theme/src -name "*.js" -o -name "*.ts" | while read file; do
            story_file=$(echo "$file" | sed 's/src/stories/; s/\.(js|ts)$/.stories.js/')
            if [ ! -f "$story_file" ]; then
              echo "Missing story: $file" | tee -a /tmp/doc-analysis/undocumented.txt
            fi
          done
          
          # Analyze Twig components
          echo "=== Twig Components ===" | tee /tmp/doc-analysis/twig-components.txt
          find web/themes/custom/adesso_cms_theme/templates/components -name "*.twig" | \
            wc -l | tee -a /tmp/doc-analysis/twig-components.txt
          
          # Analyze Drupal modules
          echo "=== Custom Modules ===" | tee /tmp/doc-analysis/modules.txt
          find web/modules/custom -name "*.module" -o -name "*.info.yml" | \
            tee -a /tmp/doc-analysis/modules.txt
          
          # Check CLAUDE.md learning patterns
          echo "=== CLAUDE.md Learning Analysis ===" | tee /tmp/doc-analysis/claude-learnings.txt
          if [ -f "CLAUDE.md" ]; then
            grep -c "### Rule #" CLAUDE.md | tee -a /tmp/doc-analysis/claude-learnings.txt
            grep -c "### Pattern #" CLAUDE.md | tee -a /tmp/doc-analysis/claude-learnings.txt
          fi

      - name: Setup MCP Configuration
        run: |
          mkdir -p /tmp/mcp-config
          cat > /tmp/mcp-config/mcp-servers.json << 'EOF'
          {
            "mcpServers": {
              "github": {
                "command": "docker",
                "args": [
                  "run", "-i", "--rm",
                  "-e", "GITHUB_PERSONAL_ACCESS_TOKEN",
                  "ghcr.io/github/github-mcp-server:sha-efef8ae"
                ],
                "env": {
                  "GITHUB_PERSONAL_ACCESS_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
                }
              }
            }
          }
          EOF

      - name: Create documentation generation prompt
        run: |
          mkdir -p /tmp/claude-prompts
          cat > /tmp/claude-prompts/doc-generation-prompt.txt << 'EOF'
          You are a technical documentation specialist for ZH-DEMO, ensuring comprehensive and up-to-date documentation.
          
          ## Project Context:
          - **ZH-DEMO**: Drupal 11.2.2 prototype for Canton Zurich municipal portals
          - **Demo Municipality**: Gemeinde Bruchtal ("Leben am Sea")
          - **Tech Stack**: Drupal 11.2.2, TailwindCSS v4, Vite, Storybook, Node.js 20
          - **Architecture**: Component-based with 15 paragraph types, atomic design principles
          - **Compliance**: German government standards (eCH-0059), WCAG 2.1 AA
          
          ## Documentation Focus Area: ${{ github.event.inputs.doc_type || 'all' }}
          
          ## Your Tasks:
          
          ### 1. Analyze Current Documentation State
          Use Read tool to examine these analysis files:
          - /tmp/doc-analysis/storybook.txt - Storybook stories count and status
          - /tmp/doc-analysis/undocumented.txt - Components missing documentation
          - /tmp/doc-analysis/twig-components.txt - Twig template components
          - /tmp/doc-analysis/modules.txt - Custom Drupal modules
          - /tmp/doc-analysis/claude-learnings.txt - CLAUDE.md learning patterns
          
          ### 2. Documentation Generation by Type:
          
          #### **Storybook Documentation** (if doc_type: storybook or all)
          - Generate missing .stories.js files for undocumented components
          - Create component usage examples and controls
          - Add accessibility and German compliance notes
          - Include Bruchtal municipality theme variations
          
          #### **API Documentation** (if doc_type: api-docs or all)
          - Generate JSDoc comments for JavaScript/TypeScript functions
          - Document Drupal hook implementations
          - Create API endpoint documentation for custom modules
          
          #### **Component Documentation** (if doc_type: component-docs or all)
          - Create README files for complex components
          - Document component props, variants, and usage patterns
          - Add accessibility implementation notes
          - Include TailwindCSS class documentation
          
          #### **CLAUDE.md Learning Updates** (if doc_type: claude-learnings or all)
          - Review recent commits for new learning opportunities
          - Update compound intelligence metrics
          - Document new prevention rules or patterns discovered
          - Consolidate similar learnings to prevent duplication
          
          #### **User Guides** (if doc_type: user-guides or all)
          - Update installation and setup documentation
          - Create municipal portal customization guides
          - Document German compliance verification procedures
          - Add troubleshooting guides for common issues
          
          ### 3. Documentation Standards:
          
          **Storybook Stories Format:**
          ```javascript
          export default {
            title: 'Components/[ComponentName]',
            component: ComponentName,
            tags: ['autodocs'],
            parameters: {
              docs: {
                description: {
                  component: 'Component description with German compliance notes'
                }
              }
            }
          };
          ```
          
          **JSDoc Format:**
          ```javascript
          /**
           * Component description
           * @param {Object} props - Component properties
           * @param {string} props.className - CSS classes (TailwindCSS)
           * @param {boolean} props.accessible - WCAG 2.1 AA compliance mode
           * @returns {HTMLElement} Accessible component for German municipal portals
           */
          ```
          
          ### 4. German Compliance Documentation:
          - Include accessibility (WCAG 2.1 AA) verification steps
          - Document government standards (eCH-0059) compliance
          - Add German language support notes
          - Include "adesso wird immer klein geschrieben" brand guidelines
          
          ### 5. Implementation:
          - Use Write tool to create new documentation files
          - Use Edit/MultiEdit tools to update existing files
          - Focus on practical, actionable documentation
          - Include code examples and usage patterns
          - Add links between related documentation
          
          **Priority Areas:**
          1. Missing Storybook stories (user-facing impact)
          2. Undocumented API functions (developer productivity)
          3. Component usage patterns (design system consistency)
          4. German compliance procedures (regulatory requirement)
          5. CLAUDE.md learning consolidation (compound intelligence)
          
          Generate documentation that helps developers build compliant, accessible municipal portals efficiently.
          EOF

      - name: Run Claude Documentation Generation
        uses: anthropics/claude-code-action@v1
        with:
          prompt: $(cat /tmp/claude-prompts/doc-generation-prompt.txt)
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          claude_args: |
            --allowedTools Read,Write,Edit,MultiEdit,Grep,Glob,LS,mcp__github__search_issues,mcp__github__create_pull_request
            --mcp-config /tmp/mcp-config/mcp-servers.json
            --max-turns 10
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build updated Storybook for verification
        run: |
          cd web/themes/custom/adesso_cms_theme
          if npm run build-storybook 2>/dev/null; then
            echo "✅ Storybook build successful after documentation updates"
          else
            echo "⚠️ Storybook build issues detected - reviewing generated documentation"
          fi

      - name: Generate documentation summary
        run: |
          echo "## 📚 Documentation Sync Summary" > doc-summary.md
          echo "**Generated**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> doc-summary.md
          echo "**Focus Area**: ${{ github.event.inputs.doc_type || 'all' }}" >> doc-summary.md
          echo "" >> doc-summary.md
          
          # Count documentation files
          story_files=$(find web/themes/custom/adesso_cms_theme/stories -name "*.stories.*" 2>/dev/null | wc -l)
          component_docs=$(find . -name "README.md" -path "*/components/*" 2>/dev/null | wc -l)
          
          echo "### 📊 Documentation Statistics" >> doc-summary.md
          echo "- **Storybook Stories**: $story_files documented components" >> doc-summary.md
          echo "- **Component READMEs**: $component_docs detailed guides" >> doc-summary.md
          echo "- **CLAUDE.md Rules**: $(grep -c "### Rule #" CLAUDE.md 2>/dev/null || echo "0") prevention patterns" >> doc-summary.md
          echo "" >> doc-summary.md
          
          echo "### 🇩🇪 German Compliance Documentation" >> doc-summary.md
          echo "- **Accessibility**: WCAG 2.1 AA compliance procedures documented" >> doc-summary.md
          echo "- **Government Standards**: eCH-0059 verification guides updated" >> doc-summary.md
          echo "- **Brand Guidelines**: adesso lowercase compliance verified" >> doc-summary.md
          echo "" >> doc-summary.md
          
          echo "### 🎯 ZH-DEMO Context" >> doc-summary.md
          echo "- **Municipal Portal**: Bruchtal municipality theme documentation" >> doc-summary.md
          echo "- **Component System**: 15 paragraph types documented" >> doc-summary.md
          echo "- **Demo Readiness**: GPZH presentation documentation verified" >> doc-summary.md

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation-updates-${{ github.run_id }}
          path: |
            doc-summary.md
            /tmp/doc-analysis/
          retention-days: 60

      - name: Auto-commit documentation updates (on push to main)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config --global user.name "claude-docs[bot]"
          git config --global user.email "claude-docs[bot]@users.noreply.github.com"
          
          if git diff --quiet; then
            echo "No documentation changes to commit"
          else
            git add .
            git commit -m "docs: Update documentation via Claude automation

            - Generated missing Storybook stories
            - Updated component documentation  
            - Verified German compliance procedures
            - Consolidated CLAUDE.md learning patterns
            
            🤖 Generated with Claude Code (https://claude.ai/code)
            
            Co-Authored-By: Claude <noreply@anthropic.com>"
            
            git push origin main
            echo "✅ Documentation updates committed and pushed"
          fi

      - name: Log completion
        run: |
          echo "✅ Documentation sync completed successfully"
          echo "Focus area: ${{ github.event.inputs.doc_type || 'all' }}"
          echo "Generated at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"