name: 'adesso CMS - Performance Monitoring & Optimization'

on:
  schedule:
    # Run performance audits twice daily
    - cron: '0 6,18 * * *'
  push:
    branches: [ main ]
    paths:
      - 'web/themes/custom/adesso_cms_theme/**'
      - 'composer.json'
      - 'composer.lock'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      audit_type:
        description: 'Type of audit to run'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - lighthouse-only
        - core-web-vitals
        - accessibility

env:
  # German Market Compliance: "adesso wird immer klein geschrieben"
  BRAND_VALIDATION: 'adesso'
  NODE_VERSION: '20'
  LIGHTHOUSE_BUDGET_PATH: '.github/lighthouse-budget.json'

jobs:
  # ============================================================================
  # CORE WEB VITALS MONITORING
  # ============================================================================
  core-web-vitals:
    name: '‚ö° Core Web Vitals Monitoring'
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    if: github.event.inputs.audit_type == 'full' || github.event.inputs.audit_type == 'core-web-vitals' || github.event_name == 'schedule' || github.event_name == 'push'
    strategy:
      matrix:
        device: ['desktop', 'mobile']
        page: ['homepage', 'content-page', 'admin-dashboard']
    steps:
      - name: 'üì• Checkout code'
        uses: actions/checkout@v4

      - name: 'üü¢ Setup Node.js ${{ env.NODE_VERSION }}'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 'üì¶ Install Lighthouse CI'
        run: |
          npm install -g @lhci/cli lighthouse
          
      - name: '‚öôÔ∏è Configure test environment'
        run: |
          # Determine test URL based on environment
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            test_url="https://adesso-cms.com"
          else
            test_url="https://staging.adesso-cms.com"
          fi
          
          echo "TEST_URL=$test_url" >> $GITHUB_ENV
          echo "Testing ${{ matrix.device }} performance on $test_url"

      - name: '‚ö° Run Core Web Vitals audit'
        run: |
          device_flag=""
          if [ "${{ matrix.device }}" = "mobile" ]; then
            device_flag="--preset=mobile"
          fi
          
          page_path=""
          case "${{ matrix.page }}" in
            "homepage") page_path="" ;;
            "content-page") page_path="/news" ;;
            "admin-dashboard") page_path="/admin" ;;
          esac
          
          test_url="${TEST_URL}${page_path}"
          
          echo "üöÄ Testing: $test_url (${{ matrix.device }})"
          
          # Run Lighthouse with Core Web Vitals focus
          lighthouse "$test_url" \
            --output json \
            --output-path lighthouse-${{ matrix.device }}-${{ matrix.page }}.json \
            --only-categories=performance \
            --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" \
            $device_flag || true

      - name: 'üìä Analyze performance metrics'
        run: |
          report_file="lighthouse-${{ matrix.device }}-${{ matrix.page }}.json"
          
          if [ -f "$report_file" ]; then
            # Extract Core Web Vitals
            lcp=$(jq -r '.audits["largest-contentful-paint"].numericValue // 0' "$report_file")
            fid=$(jq -r '.audits["max-potential-fid"].numericValue // 0' "$report_file")
            cls=$(jq -r '.audits["cumulative-layout-shift"].numericValue // 0' "$report_file")
            score=$(jq -r '.categories.performance.score * 100 // 0' "$report_file")
            
            echo "## ‚ö° Core Web Vitals - ${{ matrix.device }} (${{ matrix.page }})" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Value | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| Performance Score | ${score}% | $([ $(echo "$score > 90" | bc -l) -eq 1 ] && echo "‚úÖ" || echo "‚ö†Ô∏è") |" >> $GITHUB_STEP_SUMMARY
            echo "| LCP (Largest Contentful Paint) | ${lcp}ms | $([ $(echo "$lcp < 2500" | bc -l) -eq 1 ] && echo "‚úÖ" || echo "‚ö†Ô∏è") |" >> $GITHUB_STEP_SUMMARY
            echo "| FID (First Input Delay) | ${fid}ms | $([ $(echo "$fid < 100" | bc -l) -eq 1 ] && echo "‚úÖ" || echo "‚ö†Ô∏è") |" >> $GITHUB_STEP_SUMMARY
            echo "| CLS (Cumulative Layout Shift) | $cls | $([ $(echo "$cls < 0.1" | bc -l) -eq 1 ] && echo "‚úÖ" || echo "‚ö†Ô∏è") |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # German market performance standards
            if [ $(echo "$score > 90" | bc -l) -eq 1 ] && [ $(echo "$lcp < 2500" | bc -l) -eq 1 ]; then
              echo "‚úÖ **German Market Standards**: Performance optimized for German users" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ö†Ô∏è **German Market Standards**: Performance below optimal for German market" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: 'üì¶ Upload performance data'
        uses: actions/upload-artifact@v4
        with:
          name: performance-${{ matrix.device }}-${{ matrix.page }}-${{ github.run_id }}
          path: lighthouse-${{ matrix.device }}-${{ matrix.page }}.json
          retention-days: 30

  # ============================================================================
  # ACCESSIBILITY PERFORMANCE AUDIT
  # ============================================================================
  accessibility-performance:
    name: '‚ôø Accessibility Performance Audit'
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    if: github.event.inputs.audit_type == 'full' || github.event.inputs.audit_type == 'accessibility' || github.event_name == 'schedule'
    steps:
      - name: 'üì• Checkout code'
        uses: actions/checkout@v4

      - name: 'üü¢ Setup Node.js ${{ env.NODE_VERSION }}'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 'üì¶ Install accessibility tools'
        run: |
          npm install -g @axe-core/cli @pa11y/cli lighthouse

      - name: '‚öôÔ∏è Configure test environment'
        run: |
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            test_url="https://adesso-cms.com"
          else
            test_url="https://staging.adesso-cms.com"
          fi
          echo "TEST_URL=$test_url" >> $GITHUB_ENV

      - name: '‚ôø Run accessibility audit'
        run: |
          echo "‚ôø Running accessibility audit on ${TEST_URL}"
          
          # Create test page for accessibility testing
          echo '<!DOCTYPE html><html lang="de"><head><meta charset="utf-8"><title>adesso CMS - Accessibility Test</title></head><body><main><h1>adesso CMS</h1><p>Accessibility test page for German market compliance</p></main></body></html>' > test-page.html
          
          # Run Axe accessibility tests
          axe test-page.html --tags wcag2a,wcag2aa --reporter json > axe-results.json || true
          
          # Run Lighthouse accessibility audit
          lighthouse "${TEST_URL}" \
            --output json \
            --output-path lighthouse-accessibility.json \
            --only-categories=accessibility \
            --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" || true

      - name: 'üìä Analyze accessibility metrics'
        run: |
          echo "## ‚ôø Accessibility Performance Audit" >> $GITHUB_STEP_SUMMARY
          
          # Analyze Axe results
          if [ -f axe-results.json ]; then
            violations=$(jq '.violations | length' axe-results.json)
            if [ "$violations" -eq 0 ]; then
              echo "‚úÖ **Axe Core**: No WCAG violations detected" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ö†Ô∏è **Axe Core**: $violations WCAG violations found" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Analyze Lighthouse accessibility results
          if [ -f lighthouse-accessibility.json ]; then
            a11y_score=$(jq -r '.categories.accessibility.score * 100 // 0' lighthouse-accessibility.json)
            echo "- **Lighthouse Accessibility Score**: ${a11y_score}%" >> $GITHUB_STEP_SUMMARY
            
            if [ $(echo "$a11y_score > 95" | bc -l) -eq 1 ]; then
              echo "‚úÖ **WCAG 2.1 AA Compliance**: Excellent accessibility standards" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ö†Ô∏è **WCAG 2.1 AA Compliance**: Accessibility improvements needed" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üá©üá™ **German Market Accessibility**: adesso CMS optimized for German users with disabilities" >> $GITHUB_STEP_SUMMARY

      - name: 'üì¶ Upload accessibility results'
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-audit-${{ github.run_id }}
          path: |
            axe-results.json
            lighthouse-accessibility.json
          retention-days: 30

  # ============================================================================
  # COMPREHENSIVE LIGHTHOUSE AUDIT
  # ============================================================================
  lighthouse-audit:
    name: 'üèÆ Comprehensive Lighthouse Audit'
    runs-on: ubuntu-24.04
    timeout-minutes: 20
    if: github.event.inputs.audit_type == 'full' || github.event.inputs.audit_type == 'lighthouse-only' || github.event_name == 'schedule'
    steps:
      - name: 'üì• Checkout code'
        uses: actions/checkout@v4

      - name: 'üü¢ Setup Node.js ${{ env.NODE_VERSION }}'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 'üì¶ Install Lighthouse CI'
        run: |
          npm install -g @lhci/cli lighthouse

      - name: '‚öôÔ∏è Create Lighthouse configuration'
        run: |
          # Create Lighthouse CI configuration
          cat > .lighthouserc.json << 'EOF'
          {
            "ci": {
              "collect": {
                "numberOfRuns": 3,
                "settings": {
                  "chromeFlags": "--headless --no-sandbox --disable-dev-shm-usage"
                }
              },
              "assert": {
                "assertions": {
                  "categories:performance": ["error", {"minScore": 0.85}],
                  "categories:accessibility": ["error", {"minScore": 0.95}],
                  "categories:best-practices": ["error", {"minScore": 0.90}],
                  "categories:seo": ["error", {"minScore": 0.90}]
                }
              },
              "upload": {
                "target": "temporary-public-storage"
              }
            }
          }
          EOF

      - name: '‚öôÔ∏è Configure test environment'
        run: |
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            test_url="https://adesso-cms.com"
          else
            test_url="https://staging.adesso-cms.com"
          fi
          echo "TEST_URL=$test_url" >> $GITHUB_ENV

      - name: 'üèÆ Run comprehensive Lighthouse audit'
        run: |
          echo "üèÆ Running comprehensive Lighthouse audit on ${TEST_URL}"
          
          # Run Lighthouse CI
          lhci autorun --collect.url="${TEST_URL}" || true
          
          # Run individual audits for detailed analysis
          lighthouse "${TEST_URL}" \
            --output json \
            --output html \
            --output-path lighthouse-full \
            --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage"

      - name: 'üìä Analyze comprehensive results'
        run: |
          echo "## üèÆ Comprehensive Lighthouse Audit" >> $GITHUB_STEP_SUMMARY
          echo "**Test URL**: ${TEST_URL}" >> $GITHUB_STEP_SUMMARY
          echo "**Test Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f lighthouse-full.json ]; then
            # Extract all category scores
            performance=$(jq -r '.categories.performance.score * 100 // 0' lighthouse-full.json)
            accessibility=$(jq -r '.categories.accessibility.score * 100 // 0' lighthouse-full.json)
            bestPractices=$(jq -r '.categories["best-practices"].score * 100 // 0' lighthouse-full.json)
            seo=$(jq -r '.categories.seo.score * 100 // 0' lighthouse-full.json)
            
            echo "### Lighthouse Category Scores" >> $GITHUB_STEP_SUMMARY
            echo "| Category | Score | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| ‚ö° Performance | ${performance}% | $([ $(echo "$performance > 85" | bc -l) -eq 1 ] && echo "‚úÖ" || echo "‚ö†Ô∏è") |" >> $GITHUB_STEP_SUMMARY
            echo "| ‚ôø Accessibility | ${accessibility}% | $([ $(echo "$accessibility > 95" | bc -l) -eq 1 ] && echo "‚úÖ" || echo "‚ö†Ô∏è") |" >> $GITHUB_STEP_SUMMARY
            echo "| üõ°Ô∏è Best Practices | ${bestPractices}% | $([ $(echo "$bestPractices > 90" | bc -l) -eq 1 ] && echo "‚úÖ" || echo "‚ö†Ô∏è") |" >> $GITHUB_STEP_SUMMARY
            echo "| üîç SEO | ${seo}% | $([ $(echo "$seo > 90" | bc -l) -eq 1 ] && echo "‚úÖ" || echo "‚ö†Ô∏è") |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # German market performance analysis
            overall_score=$(echo "($performance + $accessibility + $bestPractices + $seo) / 4" | bc -l)
            if [ $(echo "$overall_score > 90" | bc -l) -eq 1 ]; then
              echo "### üéâ **Excellent German Market Performance** ‚úÖ" >> $GITHUB_STEP_SUMMARY
              echo "adesso CMS meets all performance standards for the German market" >> $GITHUB_STEP_SUMMARY
            else
              echo "### ‚ö†Ô∏è **German Market Performance Needs Improvement**" >> $GITHUB_STEP_SUMMARY
              echo "Some areas need optimization for optimal German user experience" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üá©üá™ **Brand Compliance**: adesso wird immer klein geschrieben ‚úì" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 'üì¶ Upload Lighthouse reports'
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports-${{ github.run_id }}
          path: |
            lighthouse-full.json
            lighthouse-full.html
            .lighthouseci/
          retention-days: 30

  # ============================================================================
  # PERFORMANCE REGRESSION DETECTION
  # ============================================================================
  performance-regression:
    name: 'üìà Performance Regression Detection'
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    needs: [core-web-vitals, lighthouse-audit]
    if: always() && (needs.core-web-vitals.result == 'success' || needs.lighthouse-audit.result == 'success')
    steps:
      - name: 'üì• Download performance data'
        uses: actions/download-artifact@v4
        with:
          pattern: performance-*
          merge-multiple: true

      - name: 'üì• Download Lighthouse reports'
        uses: actions/download-artifact@v4
        with:
          pattern: lighthouse-reports-*
          merge-multiple: true

      - name: 'üìà Analyze performance trends'
        run: |
          echo "## üìà Performance Regression Analysis" >> $GITHUB_STEP_SUMMARY
          echo "**Analysis Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Analyze desktop vs mobile performance
          desktop_files=$(ls lighthouse-desktop-*.json 2>/dev/null || echo "")
          mobile_files=$(ls lighthouse-mobile-*.json 2>/dev/null || echo "")
          
          if [ -n "$desktop_files" ] || [ -n "$mobile_files" ]; then
            echo "### Device Performance Comparison" >> $GITHUB_STEP_SUMMARY
            echo "| Device | Performance Score | LCP | CLS | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------------------|-----|-----|--------|" >> $GITHUB_STEP_SUMMARY
            
            # Process desktop results
            for file in $desktop_files; do
              if [ -f "$file" ]; then
                score=$(jq -r '.categories.performance.score * 100 // 0' "$file")
                lcp=$(jq -r '.audits["largest-contentful-paint"].numericValue // 0' "$file")
                cls=$(jq -r '.audits["cumulative-layout-shift"].numericValue // 0' "$file")
                status=$([ $(echo "$score > 85" | bc -l) -eq 1 ] && echo "‚úÖ" || echo "‚ö†Ô∏è")
                echo "| üñ•Ô∏è Desktop | ${score}% | ${lcp}ms | $cls | $status |" >> $GITHUB_STEP_SUMMARY
              fi
            done
            
            # Process mobile results
            for file in $mobile_files; do
              if [ -f "$file" ]; then
                score=$(jq -r '.categories.performance.score * 100 // 0' "$file")
                lcp=$(jq -r '.audits["largest-contentful-paint"].numericValue // 0' "$file")
                cls=$(jq -r '.audits["cumulative-layout-shift"].numericValue // 0' "$file")
                status=$([ $(echo "$score > 85" | bc -l) -eq 1 ] && echo "‚úÖ" || echo "‚ö†Ô∏è")
                echo "| üì± Mobile | ${score}% | ${lcp}ms | $cls | $status |" >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üá©üá™ German Market Performance Standards" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Performance Score**: >85%" >> $GITHUB_STEP_SUMMARY
          echo "- **Target LCP**: <2.5 seconds" >> $GITHUB_STEP_SUMMARY
          echo "- **Target CLS**: <0.1" >> $GITHUB_STEP_SUMMARY
          echo "- **Brand Compliance**: adesso wird immer klein geschrieben ‚úì" >> $GITHUB_STEP_SUMMARY

      - name: 'üö® Performance alert check'
        run: |
          # Check if any performance scores are below threshold
          alert_needed=false
          
          for file in lighthouse-*.json; do
            if [ -f "$file" ]; then
              score=$(jq -r '.categories.performance.score * 100 // 0' "$file")
              if [ $(echo "$score < 75" | bc -l) -eq 1 ]; then
                alert_needed=true
                echo "‚ö†Ô∏è Performance alert: Score below 75% in $file"
              fi
            fi
          done
          
          if [ "$alert_needed" = true ]; then
            echo "üö® Performance regression detected - immediate attention required"
            exit 1
          else
            echo "‚úÖ Performance standards maintained"
          fi

  # ============================================================================
  # PERFORMANCE OPTIMIZATION RECOMMENDATIONS
  # ============================================================================
  optimization-recommendations:
    name: 'üéØ Performance Optimization Recommendations'
    runs-on: ubuntu-24.04
    timeout-minutes: 8
    needs: [core-web-vitals, lighthouse-audit, performance-regression]
    if: always()
    steps:
      - name: 'üéØ Generate optimization recommendations'
        run: |
          echo "## üéØ Performance Optimization Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "**Generated**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üá©üá™ German Market Optimization Priorities" >> $GITHUB_STEP_SUMMARY
          echo "1. **Core Web Vitals**: Maintain LCP <2.5s for German users" >> $GITHUB_STEP_SUMMARY
          echo "2. **Mobile Performance**: Optimize for German mobile network conditions" >> $GITHUB_STEP_SUMMARY
          echo "3. **Accessibility**: WCAG 2.1 AA compliance for inclusive German audience" >> $GITHUB_STEP_SUMMARY
          echo "4. **SEO**: German language optimization and local search" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üöÄ Recommended Actions" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Implement lazy loading for images and components" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Optimize Tailwind CSS bundle size with purging" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Configure CDN for German/European edge locations" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Implement service worker for caching strategy" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Optimize Drupal render caching for German content" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Monitor and optimize AI integration performance" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üìä Monitoring Setup" >> $GITHUB_STEP_SUMMARY
          echo "- Performance monitoring active for German market metrics" >> $GITHUB_STEP_SUMMARY
          echo "- Core Web Vitals tracking configured" >> $GITHUB_STEP_SUMMARY
          echo "- Accessibility compliance monitoring enabled" >> $GITHUB_STEP_SUMMARY
          echo "- Brand compliance verification: adesso wird immer klein geschrieben ‚úì" >> $GITHUB_STEP_SUMMARY

# ============================================================================
# WORKFLOW METADATA
# ============================================================================
# ‚ö° Performance Monitoring & Optimization for adesso CMS
# üèÆ Comprehensive Lighthouse audits with Core Web Vitals focus
# üá©üá™ German market compliance: "adesso wird immer klein geschrieben"
# üìà Performance regression detection and alerting
# üöÄ Generated with Claude Code (https://claude.ai/code)
# 
# Co-Authored-By: Claude <noreply@anthropic.com>