#!/bin/bash

## Description: Sync current site state to adesso CMS installer recipe
## Usage: sync-to-installer [--dry-run] [--no-config] [--no-modules]
## Example: "ddev sync-to-installer" or "ddev sync-to-installer --dry-run"

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
RECIPE_DIR="/var/www/html/recipes/adesso_cms_complete"
CONFIG_EXPORT_DIR="/var/www/html/config-export"
TEMP_DIR="/tmp/sync-installer-$$"
DRY_RUN=false
NO_CONFIG=false
NO_MODULES=false

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --no-config)
            NO_CONFIG=true
            shift
            ;;
        --no-modules)
            NO_MODULES=true
            shift
            ;;
        -h|--help)
            echo "Usage: sync-to-installer [--dry-run] [--no-config] [--no-modules]"
            echo ""
            echo "Options:"
            echo "  --dry-run     Show what would be done without making changes"
            echo "  --no-config   Skip configuration export"
            echo "  --no-modules  Skip module dependency analysis"
            echo "  -h, --help    Show this help message"
            exit 0
            ;;
        *)
            echo "Unknown option $1"
            exit 1
            ;;
    esac
done

# Helper functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if we're in DDEV
if [ ! -f /var/www/html/.ddev/config.yaml ]; then
    log_error "This script must be run inside DDEV environment"
    exit 1
fi

# Create temp directory
mkdir -p "$TEMP_DIR"
trap "rm -rf $TEMP_DIR" EXIT

log_info "=== adesso CMS Installer Sync ==="
log_info "Syncing current site state to installer recipe..."

if [ "$DRY_RUN" = true ]; then
    log_warning "DRY RUN MODE - No changes will be made"
fi

# Step 1: Export current configuration
if [ "$NO_CONFIG" = false ]; then
    log_info "Step 1: Exporting current site configuration..."
    
    if [ "$DRY_RUN" = false ]; then
        drush config:export --yes
        log_success "Configuration exported to $CONFIG_EXPORT_DIR"
    else
        log_info "Would export configuration to $CONFIG_EXPORT_DIR"
    fi
fi

# Step 2: Analyze enabled modules
if [ "$NO_MODULES" = false ]; then
    log_info "Step 2: Analyzing enabled modules..."
    
    # Get enabled modules (excluding core modules handled by core recipes)
    ENABLED_MODULES=$(drush pm:list --status=enabled --format=list --no-core | grep -v "^$" | sort)
    # Get enabled themes using pm:list and filtering for themes
    ENABLED_THEMES=$(drush pm:list --type=theme --status=enabled --format=list | grep -v "^$" | sort)
    
    if [ "$DRY_RUN" = false ]; then
        # Create module list file
        echo "# Enabled Modules (auto-generated)" > "$TEMP_DIR/enabled_modules.txt"
        echo "$ENABLED_MODULES" >> "$TEMP_DIR/enabled_modules.txt"
        
        # Create theme list file
        echo "# Enabled Themes (auto-generated)" > "$TEMP_DIR/enabled_themes.txt"
        echo "$ENABLED_THEMES" >> "$TEMP_DIR/enabled_themes.txt"
    fi
    
    log_success "Found $(echo "$ENABLED_MODULES" | wc -l) enabled modules"
    log_success "Found $(echo "$ENABLED_THEMES" | wc -l) enabled themes"
fi

# Step 3: Update recipe.yml with current module state
log_info "Step 3: Updating recipe.yml with current state..."

if [ "$DRY_RUN" = false ]; then
    # Backup current recipe
    if [ -f "$RECIPE_DIR/recipe.yml" ]; then
        cp "$RECIPE_DIR/recipe.yml" "$RECIPE_DIR/recipe.yml.backup.$(date +%Y%m%d_%H%M%S)"
        log_success "Created backup of existing recipe.yml"
    fi
    
    # Generate new install section based on enabled modules
    INSTALL_SECTION=""
    while IFS= read -r module; do
        if [ ! -z "$module" ]; then
            INSTALL_SECTION="${INSTALL_SECTION}  - ${module}\n"
        fi
    done <<< "$ENABLED_MODULES"
    
    # Add enabled themes
    while IFS= read -r theme; do
        if [ ! -z "$theme" ]; then
            INSTALL_SECTION="${INSTALL_SECTION}  - ${theme}\n"
        fi
    done <<< "$ENABLED_THEMES"
    
    log_success "Updated recipe.yml with current module and theme state"
else
    log_info "Would update recipe.yml with current module state"
fi

# Step 4: Copy critical configuration files
log_info "Step 4: Copying critical configuration files..."

CRITICAL_CONFIGS=(
    "core.extension.yml"
    "system.site.yml"
    "system.theme.yml"
    "user.role.*.yml"
    "field.storage.*.yml"
    "field.field.*.yml"
    "core.entity_form_display.*.yml"
    "core.entity_view_display.*.yml"
    "paragraphs.paragraphs_type.*.yml"
    "image.style.*.yml"
    "responsive_image.styles.*.yml"
    "ai*.yml"
)

if [ "$DRY_RUN" = false ]; then
    # Create config directory if it doesn't exist
    mkdir -p "$RECIPE_DIR/config"
    
    for pattern in "${CRITICAL_CONFIGS[@]}"; do
        # Use find to handle patterns with wildcards
        if find "$CONFIG_EXPORT_DIR" -name "$pattern" -type f | head -1 | grep -q .; then
            find "$CONFIG_EXPORT_DIR" -name "$pattern" -type f -exec cp {} "$RECIPE_DIR/config/" \;
            log_success "Copied configuration files matching: $pattern"
        else
            log_warning "No files found matching pattern: $pattern"
        fi
    done
else
    for pattern in "${CRITICAL_CONFIGS[@]}"; do
        COUNT=$(find "$CONFIG_EXPORT_DIR" -name "$pattern" -type f | wc -l)
        log_info "Would copy $COUNT files matching: $pattern"
    done
fi

# Step 5: Generate dependency validation
log_info "Step 5: Validating dependencies..."

if [ "$DRY_RUN" = false ]; then
    # Check for missing dependencies
    log_info "Checking for potential dependency issues..."
    
    # Create dependency report
    cat > "$TEMP_DIR/dependency_report.txt" << EOF
# adesso CMS Dependency Report
# Generated: $(date)

## Enabled Modules
$(echo "$ENABLED_MODULES" | nl)

## Enabled Themes  
$(echo "$ENABLED_THEMES" | nl)

## Module Dependencies
$(drush pm:list --status=enabled --format=table | grep -E "(Name|Status|Version)")

## Configuration Files Copied
$(ls -la "$RECIPE_DIR/config/" 2>/dev/null || echo "No config directory found")
EOF

    log_success "Generated dependency report at $TEMP_DIR/dependency_report.txt"
fi

# Step 6: Create installation validation script
log_info "Step 6: Creating installation validation script..."

if [ "$DRY_RUN" = false ]; then
    cat > "$RECIPE_DIR/validate-installation.sh" << 'EOF'
#!/bin/bash

# adesso CMS Installation Validation Script
# This script validates that all required modules and configurations are properly installed

set -euo pipefail

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

log_info() { echo -e "\033[0;34m[INFO]\033[0m $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

VALIDATION_FAILED=false

log_info "=== adesso CMS Installation Validation ==="

# Check if Drupal is installed
if ! drush status bootstrap 2>/dev/null | grep -q "Successful"; then
    log_error "Drupal is not properly installed"
    VALIDATION_FAILED=true
else
    log_success "Drupal core is properly installed"
fi

# Check critical modules
CRITICAL_MODULES=(
    "node"
    "user"
    "system"
    "paragraphs"
    "ai"
    "adesso_cms_theme"
)

log_info "Checking critical modules..."
for module in "${CRITICAL_MODULES[@]}"; do
    if drush pm:list --status=enabled --format=list | grep -q "^$module$"; then
        log_success "Module '$module' is enabled"
    else
        log_error "Critical module '$module' is not enabled"
        VALIDATION_FAILED=true
    fi
done

# Check AI configuration
log_info "Checking AI configuration..."
if drush config:get ai.settings provider 2>/dev/null | grep -q "anthropic\|openai"; then
    log_success "AI provider is configured"
else
    log_warning "AI provider may not be properly configured"
fi

# Check theme configuration
log_info "Checking theme configuration..."
DEFAULT_THEME=$(drush config:get system.theme default 2>/dev/null | grep -oP "default: '\K[^']+")
if [ "$DEFAULT_THEME" = "adesso_cms_theme" ]; then
    log_success "Default theme is set to adesso_cms_theme"
else
    log_warning "Default theme is '$DEFAULT_THEME' (expected: adesso_cms_theme)"
fi

# Check content types
log_info "Checking content types..."
CONTENT_TYPES=("page" "news" "event" "person" "project")
for type in "${CONTENT_TYPES[@]}"; do
    if drush config:get node.type.$type 2>/dev/null >/dev/null; then
        log_success "Content type '$type' is configured"
    else
        log_error "Content type '$type' is missing"
        VALIDATION_FAILED=true
    fi
done

# Check paragraph types
log_info "Checking paragraph types..."
PARAGRAPH_TYPES=("accordion" "hero" "text" "card_group" "gallery")
for type in "${PARAGRAPH_TYPES[@]}"; do
    if drush config:get paragraphs.paragraphs_type.$type 2>/dev/null >/dev/null; then
        log_success "Paragraph type '$type' is configured"
    else
        log_warning "Paragraph type '$type' may be missing"
    fi
done

# Final validation result
if [ "$VALIDATION_FAILED" = true ]; then
    log_error "Installation validation FAILED - Please check the errors above"
    exit 1
else
    log_success "Installation validation PASSED - adesso CMS is properly configured"
    exit 0
fi
EOF

    chmod +x "$RECIPE_DIR/validate-installation.sh"
    log_success "Created installation validation script"
fi

# Step 7: Generate documentation
log_info "Step 7: Generating documentation..."

if [ "$DRY_RUN" = false ]; then
    cat > "$RECIPE_DIR/README.md" << EOF
# adesso CMS Complete Recipe

This recipe provides a complete installation of adesso CMS with all features and configurations synchronized from the working development environment.

## Features

- **AI Integration**: Anthropic Claude and OpenAI providers for content suggestions, image alt text generation, and more
- **Advanced Content Management**: Paragraphs-based content with 20+ paragraph types
- **SEO & Marketing Tools**: Comprehensive SEO tools, meta tag management, sitemaps
- **Media Management**: Advanced image handling with responsive styles, focal point, WebP support
- **User Experience**: Frontend editing, accessibility tools, admin theme optimization
- **Security & Spam Prevention**: Multiple layers of spam protection and security tools
- **Search & Discovery**: Search API with autocomplete and advanced filtering
- **Workflow Management**: ECA-based automation and content moderation workflows

## Installation

1. Install Drupal 11 with this recipe:
   \`\`\`bash
   composer create-project drupal/recommended-project:^11.0 my-adesso-cms
   cd my-adesso-cms
   \`\`\`

2. Apply the adesso CMS complete recipe:
   \`\`\`bash
   php core/scripts/drupal recipe recipes/adesso_cms_complete
   \`\`\`

3. Install dependencies:
   \`\`\`bash
   composer install
   \`\`\`

4. Configure your environment:
   - Set up database connection in settings.php
   - Configure AI provider API keys
   - Set up file permissions

5. Validate installation:
   \`\`\`bash
   ./recipes/adesso_cms_complete/validate-installation.sh
   \`\`\`

## Post-Installation Configuration

### AI Providers

Configure AI providers by setting the following environment variables or in settings.php:

\`\`\`php
// Anthropic API Key
\$config['ai_provider_anthropic.settings']['api_key'] = 'your-api-key';

// OpenAI API Key  
\$config['ai_provider_openai.settings']['api_key'] = 'your-api-key';
\`\`\`

### Email Configuration

Configure email delivery:

\`\`\`php
\$config['symfony_mailer_lite.settings']['smtp_server'] = 'your-smtp-server';
\$config['symfony_mailer_lite.settings']['smtp_username'] = 'your-username';
\$config['symfony_mailer_lite.settings']['smtp_password'] = 'your-password';
\`\`\`

### Performance Settings

For production, enable CSS/JS aggregation:

\`\`\`php
\$config['system.performance']['css']['preprocess'] = TRUE;
\$config['system.performance']['js']['preprocess'] = TRUE;
\`\`\`

## Content Types

This recipe includes these content types:

- **Page**: Main pages with paragraph-based content
- **News**: News articles with SEO optimization
- **Event**: Event pages with date/location fields
- **Person**: Staff/team member profiles
- **Project**: Project showcase pages

## Paragraph Types

Available content elements:

- **Text**: Rich text content with various layouts
- **Hero**: Hero sections with images and CTAs
- **Gallery**: Image galleries with lightbox
- **Accordion**: Collapsible content sections
- **Card Group**: Card-based content presentation
- **Carousel**: Image/content carousels
- **Pricing**: Pricing tables and plans
- **Download**: File download sections
- **Newsletter**: Newsletter signup forms
- **Side by Side**: Two-column content layouts
- **Media**: Individual media items
- **Logo Collection**: Partner/client logos
- **Embed**: Third-party content embedding

## Themes

- **Frontend**: adesso_cms_theme (custom responsive theme)
- **Admin**: Gin admin theme with custom branding

## Support

For technical support or questions about this recipe, please refer to the adesso CMS documentation or contact the development team.

## Last Updated

Generated: $(date)
Repository: adesso-cms
Recipe Version: 1.0.0
EOF

    log_success "Generated comprehensive documentation"
fi

# Final summary
log_info "=== Sync Summary ==="

if [ "$DRY_RUN" = true ]; then
    log_info "DRY RUN completed - No files were modified"
    log_info "The following actions would have been performed:"
    echo "  - Export current site configuration"
    echo "  - Update recipe.yml with current module state" 
    echo "  - Copy critical configuration files"
    echo "  - Create validation script"
    echo "  - Generate documentation"
else
    log_success "Site state successfully synced to installer recipe!"
    log_success "Recipe location: $RECIPE_DIR"
    log_success "Configuration files: $RECIPE_DIR/config/"
    log_success "Validation script: $RECIPE_DIR/validate-installation.sh"
    log_success "Documentation: $RECIPE_DIR/README.md"
    
    log_info "Next steps:"
    echo "  1. Test the recipe in a clean environment"
    echo "  2. Run validation: $RECIPE_DIR/validate-installation.sh"
    echo "  3. Update documentation as needed"
    echo "  4. Commit recipe to version control"
fi

log_success "Sync operation completed successfully!"