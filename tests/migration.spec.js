/**
 * Playwright Migration Test Suite
 * Tests for Drupal CMS Page Migration
 * 
 * This test suite validates that the migration to drupal_cms_page
 * is working correctly and that all functionality is preserved.
 */

import { test, expect } from '@playwright/test';

test.describe('Drupal CMS Page Migration Tests', () => {
  const baseUrl = 'https://adesso-cms.ddev.site';

  test.beforeEach(async ({ page }) => {
    // Handle any SSL certificate issues in development
    await page.goto(baseUrl, { waitUntil: 'networkidle' });
  });

  test('Homepage loads successfully with adesso_cms_theme', async ({ page }) => {
    await page.goto(baseUrl);
    
    // Wait for the page to load completely
    await page.waitForLoadState('networkidle');
    
    // Check that the page loads without errors
    await expect(page).toHaveTitle(/adesso CMS/);
    
    // Verify the theme is applied (check for theme-specific elements)
    const body = page.locator('body');
    await expect(body).toBeVisible();
    
    // Take a screenshot for visual regression testing
    await page.screenshot({ path: 'screenshots/homepage-after-migration.png' });
  });

  test('Admin login functionality works', async ({ page }) => {
    // Use the admin login link generated by drush
    await page.goto(baseUrl + '/user/login');
    
    // Check if login form is present
    await expect(page.locator('form#user-login-form')).toBeVisible();
    
    // Take screenshot of login page
    await page.screenshot({ path: 'screenshots/admin-login-page.png' });
  });

  test('Content creation page is accessible', async ({ page }) => {
    // Navigate to content creation page
    await page.goto(baseUrl + '/node/add/page');
    
    // Check if we're redirected to login (expected for anonymous users)
    await expect(page.url()).toContain('/user/login');
    
    // Take screenshot
    await page.screenshot({ path: 'screenshots/content-creation-redirect.png' });
  });

  test('Page content type exists and is functional', async ({ page }) => {
    // Check that the page content type is available
    await page.goto(baseUrl + '/admin/structure/types');
    
    // This should redirect to login, but we can verify the URL structure
    await expect(page.url()).toContain('/user/login');
    
    // Take screenshot
    await page.screenshot({ path: 'screenshots/content-types-access.png' });
  });

  test('Theme assets load correctly', async ({ page }) => {
    await page.goto(baseUrl);
    
    // Check that CSS files are loaded
    const cssFiles = await page.locator('link[rel="stylesheet"]').count();
    expect(cssFiles).toBeGreaterThan(0);
    
    // Check for any 404 errors in network requests
    const responses = [];
    page.on('response', response => responses.push(response));
    
    await page.reload();
    await page.waitForLoadState('networkidle');
    
    // Check for any failed requests
    const failedRequests = responses.filter(response => response.status() >= 400);
    expect(failedRequests.length).toBe(0);
    
    // Take screenshot
    await page.screenshot({ path: 'screenshots/theme-assets-loaded.png' });
  });

  test('Responsive design works correctly', async ({ page }) => {
    await page.goto(baseUrl);
    
    // Test different viewport sizes
    const viewports = [
      { width: 1920, height: 1080, name: 'desktop' },
      { width: 768, height: 1024, name: 'tablet' },
      { width: 375, height: 667, name: 'mobile' }
    ];
    
    for (const viewport of viewports) {
      await page.setViewportSize({ width: viewport.width, height: viewport.height });
      await page.waitForLoadState('networkidle');
      
      // Take screenshot for each viewport
      await page.screenshot({ 
        path: `screenshots/responsive-${viewport.name}.png`,
        fullPage: true
      });
    }
  });

  test('Performance baseline test', async ({ page }) => {
    // Start performance measurement
    const startTime = Date.now();
    
    await page.goto(baseUrl);
    await page.waitForLoadState('networkidle');
    
    const endTime = Date.now();
    const loadTime = endTime - startTime;
    
    // Log performance metrics
    console.log(`Page load time: ${loadTime}ms`);
    
    // Basic performance assertion (should load within 5 seconds)
    expect(loadTime).toBeLessThan(5000);
    
    // Take screenshot
    await page.screenshot({ path: 'screenshots/performance-baseline.png' });
  });
});