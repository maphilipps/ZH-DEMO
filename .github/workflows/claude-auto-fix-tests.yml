name: Claude Auto Fix Failing Tests

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test failure to fix'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'unit'
          - 'integration'
          - 'accessibility'
          - 'visual'


jobs:
  auto-fix-tests:
    if: |
      (github.event.workflow_run.conclusion == 'failure' && 
       contains(github.event.workflow_run.name, 'test')) ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_branch || github.ref }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup git identity
        run: |
          git config --global user.email "claude[bot]@users.noreply.github.com"
          git config --global user.name "claude[bot]"

      - name: Create fix branch
        id: branch
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            BRANCH_NAME="claude-auto-fix-tests-manual-${{ github.run_id }}"
          else
            BRANCH_NAME="claude-auto-fix-tests-${{ github.event.workflow_run.head_branch }}-${{ github.run_id }}"
          fi
          git checkout -b "$BRANCH_NAME"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Get test failure details
        id: failure_details
        uses: actions/github-script@v7
        with:
          script: |
            let failureInfo = {
              runUrl: '',
              failedJobs: [],
              testLogs: []
            };

            if (context.eventName === 'workflow_run') {
              const run = await github.rest.actions.getWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: ${{ github.event.workflow_run.id }}
              });
              
              const jobs = await github.rest.actions.listJobsForWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: ${{ github.event.workflow_run.id }}
              });
              
              const failedJobs = jobs.data.jobs.filter(job => 
                job.conclusion === 'failure' && 
                (job.name.toLowerCase().includes('test') || 
                 job.name.toLowerCase().includes('spec'))
              );
              
              failureInfo.runUrl = run.data.html_url;
              failureInfo.failedJobs = failedJobs.map(j => j.name);
              
              // Get test-specific logs
              for (const job of failedJobs) {
                try {
                  const logs = await github.rest.actions.downloadJobLogsForWorkflowRun({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    job_id: job.id
                  });
                  failureInfo.testLogs.push({
                    jobName: job.name,
                    logs: logs.data
                  });
                } catch (error) {
                  console.log(`Failed to get logs for job ${job.name}: ${error.message}`);
                }
              }
            } else {
              failureInfo.runUrl = `Manual trigger for test type: ${{ inputs.test_type }}`;
              failureInfo.failedJobs = [`Manual fix request: ${{ inputs.test_type }}`];
            }
            
            return failureInfo;

      - name: Setup MCP configuration
        run: |
          mkdir -p /tmp/mcp-config
          cat > /tmp/mcp-config/mcp-servers.json << 'EOF'
          {
            "mcpServers": {
              "github": {
                "command": "docker",
                "args": [
                  "run", "-i", "--rm",
                  "-e", "GITHUB_PERSONAL_ACCESS_TOKEN",
                  "ghcr.io/github/github-mcp-server:sha-efef8ae"
                ],
                "env": {
                  "GITHUB_PERSONAL_ACCESS_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
                }
              }
            }
          }
          EOF

      - name: Fix failing tests with Claude
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          prompt: |
            # ZH-DEMO Test Auto-Fix Assistant

            You are specialized in fixing failing tests for the ZH-DEMO Drupal 11.2.2 municipal portal project without modifying test files.

            ## 🎯 **CRITICAL RULE: DO NOT MODIFY TEST FILES**
            - **NEVER** modify `.test.js`, `.spec.js`, or any test files
            - **ONLY** fix the source code that the tests are validating
            - Focus on implementation bugs, not test expectations

            ## 📋 **Context Information**
            - **Project**: ZH-DEMO Municipal Portal (Gemeinde Bruchtal)
            - **Stack**: Drupal 11.2.2, TailwindCSS v4, Vite, Alpine.js, Storybook
            - **Environment**: DDEV (PHP 8.3, Node.js 20, MariaDB 10.11)
            - **Compliance**: German government standards (eCH-0059, WCAG 2.1 AA)

            ## 🔍 **Test Failure Analysis**
            **Failed CI Run**: ${{ fromJSON(steps.failure_details.outputs.result).runUrl }}
            **Failed Jobs**: ${{ join(fromJSON(steps.failure_details.outputs.result).failedJobs, ', ') }}
            **Test Type Request**: ${{ inputs.test_type || 'auto-detected' }}

            **Failure Logs**:
            ```
            ${{ toJSON(fromJSON(steps.failure_details.outputs.result).testLogs) }}
            ```

            ## 🛠️ **Fix Strategy Framework**

            ### **Unit Test Failures**
            - Fix component logic, prop handling, state management
            - Ensure Alpine.js bindings work correctly
            - Fix JavaScript scope and function availability
            - Validate CSS class applications and theme variables

            ### **Integration Test Failures**  
            - Fix Drupal configuration issues
            - Resolve paragraph field configurations
            - Fix Twig template rendering issues
            - Ensure proper field display configurations

            ### **Accessibility Test Failures**
            - Fix ARIA attributes and roles
            - Ensure proper heading hierarchy
            - Fix keyboard navigation issues
            - Resolve color contrast problems

            ### **Visual Regression Failures**
            - Fix CSS styling inconsistencies
            - Resolve TailwindCSS v4 theme variable issues
            - Fix responsive design breakpoints
            - Ensure component variant styling

            ## 🔧 **ZH-DEMO Specific Patterns**

            ### **Common Fix Patterns**:
            1. **Theme Variables**: Use `@theme { --color-primary-600: #value }` not utility overrides
            2. **Alpine.js Functions**: Ensure global functions attached to `window` object
            3. **Paragraph Fields**: Enable "Add in between" functionality (`add_above: add_above`)
            4. **Accessibility**: Implement proper ARIA patterns for German compliance
            5. **File Uploads**: Multi-layer validation (MIME + extension + sanitization)

            ### **Prevention Rules to Apply**:
            - **Rule #1**: Paragraph frontend editing fix patterns
            - **Rule #4**: DDEV npm command usage (`ddev npm` not plain `npm`)
            - **Rule #14**: Storybook/Vite library mode isolation
            - **Rule #15**: Accessibility test fixes with specific selectors
            - **CSS Rule #1**: Never override Tailwind utilities, only set theme variables

            ## 📝 **Required Actions**

            1. **Analyze the test failures** from the provided logs
            2. **Identify root causes** in source code (not test expectations)
            3. **Apply ZH-DEMO patterns** from CLAUDE.md prevention rules
            4. **Fix the implementation** to make tests pass
            5. **Document the fix** in commit message referencing relevant prevention rule

            ## 🚀 **Implementation Guidelines**

            - Use DDEV commands when applicable: `ddev npm`, `ddev drush`
            - Follow German compliance patterns (eCH-0059, WCAG 2.1 AA)
            - Maintain TailwindCSS v4 theme architecture
            - Preserve Alpine.js functionality patterns
            - Apply compound engineering learnings from CLAUDE.md

            ## ✅ **Success Criteria**

            - Tests pass without modifying test files
            - Implementation follows ZH-DEMO patterns
            - German compliance maintained
            - No regression in existing functionality
            - Fix documented with prevention rule reference

            **Target Branch**: `${{ steps.branch.outputs.branch_name }}`
            **Base Reference**: ${{ github.event.workflow_run.head_branch || github.ref }}

            Begin the test fix analysis and implementation now.

          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          claude_args: |
            --allowedTools Edit,MultiEdit,Write,Read,Glob,Grep,LS,Bash(git:*),Bash(ddev:*),Bash(npm:*),Bash(npx:*),Bash(composer:*),Bash(drush:*)
            --mcp-config /tmp/mcp-config/mcp-servers.json
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run tests to validate fixes
        id: test_validation
        run: |
          echo "Running tests to validate fixes..."
          
          # Determine test command based on project structure
          if [[ -f "ddev" || -d ".ddev" ]]; then
            echo "Using DDEV environment for testing..."
            if command -v ddev &> /dev/null; then
              ddev npm test 2>&1 | tee test_results.log || true
              ddev npm run test:accessibility 2>&1 | tee -a test_results.log || true
            else
              echo "DDEV not available, using standard npm..."
              npm test 2>&1 | tee test_results.log || true
            fi
          else
            echo "Using standard npm for testing..."
            npm test 2>&1 | tee test_results.log || true
          fi
          
          # Check if tests are now passing
          if grep -q "FAIL\|ERROR\|✗" test_results.log; then
            echo "test_status=failed" >> $GITHUB_OUTPUT
            echo "Some tests are still failing after fixes."
          else
            echo "test_status=passed" >> $GITHUB_OUTPUT  
            echo "Tests are now passing after fixes!"
          fi

      - name: Create or update pull request
        if: always()
        uses: actions/github-script@v7
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          script: |
            const branchName = '${{ steps.branch.outputs.branch_name }}';
            const testStatus = '${{ steps.test_validation.outputs.test_status }}';
            const baseBranch = '${{ github.event.workflow_run.head_branch || github.ref_name }}';
            
            const title = `🤖 Auto-fix failing tests (${testStatus === 'passed' ? '✅' : '⚠️'})`;
            
            const body = `## 🤖 Automated Test Fix
            
            This PR was automatically generated to fix failing tests in the CI pipeline.
            
            ### 📊 **Fix Results**
            - **Test Status**: ${testStatus === 'passed' ? '✅ Tests now passing' : '⚠️ Some tests still failing'}
            - **Original Failure**: ${{ fromJSON(steps.failure_details.outputs.result).runUrl }}
            - **Failed Jobs**: ${{ join(fromJSON(steps.failure_details.outputs.result).failedJobs, ', ') }}
            - **Fix Strategy**: Source code fixes without modifying test files
            
            ### 🎯 **ZH-DEMO Context Applied**
            - German compliance patterns (eCH-0059, WCAG 2.1 AA)
            - TailwindCSS v4 theme architecture
            - Alpine.js functionality patterns
            - DDEV environment considerations
            - Compound engineering prevention rules
            
            ### 🔍 **What Was Fixed**
            ${testStatus === 'passed' 
              ? '✅ Implementation bugs that caused test failures were identified and resolved.' 
              : '⚠️ Partial fixes applied - manual review may be needed for remaining issues.'}
            
            ### ✅ **Review Checklist**
            - [ ] Verify tests are passing
            - [ ] Check that no test files were modified
            - [ ] Confirm German compliance maintained
            - [ ] Validate Alpine.js functionality
            - [ ] Review TailwindCSS theme variables
            
            **Generated by**: Claude Code Auto-Fix Tests
            **Base Branch**: ${baseBranch}
            **Target**: ZH-DEMO Municipal Portal
            `;
            
            try {
              // Check if PR already exists
              const prs = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:${branchName}`,
                state: 'open'
              });
              
              if (prs.data.length > 0) {
                // Update existing PR
                await github.rest.pulls.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prs.data[0].number,
                  title: title,
                  body: body
                });
                console.log(`Updated PR #${prs.data[0].number}`);
              } else {
                // Create new PR
                const pr = await github.rest.pulls.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: body,
                  head: branchName,
                  base: baseBranch
                });
                console.log(`Created PR #${pr.data.number}`);
                
                // Add labels
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.data.number,
                  labels: ['automated-fix', 'tests', 'claude-generated']
                });
              }
            } catch (error) {
              console.log('Error managing PR:', error.message);
              // Continue execution even if PR creation fails
            }

      - name: Comment on original issue/PR if applicable
        if: github.event.workflow_run.pull_requests[0]
        uses: actions/github-script@v7
        with:
          script: |
            const testStatus = '${{ steps.test_validation.outputs.test_status }}';
            const branchName = '${{ steps.branch.outputs.branch_name }}';
            const prNumber = ${{ github.event.workflow_run.pull_requests[0].number }};
            
            const statusEmoji = testStatus === 'passed' ? '✅' : '⚠️';
            const statusText = testStatus === 'passed' ? 'Tests Fixed' : 'Partial Fix Applied';
            
            const comment = `## 🤖 ${statusEmoji} Automated Test Fix - ${statusText}
            
            I've automatically analyzed the failing tests and applied fixes to the source code:
            
            **${statusEmoji} Result**: ${statusText}
            **🔧 Branch**: \`${branchName}\`
            **📋 Strategy**: Fixed implementation bugs without modifying test files
            
            ${testStatus === 'passed' 
              ? '✅ **Tests are now passing!** The fixes have been applied successfully.' 
              : '⚠️ **Partial fixes applied** - some tests may still need manual review.'}
            
            ### 🎯 ZH-DEMO Patterns Applied:
            - German compliance maintenance (eCH-0059)
            - TailwindCSS v4 theme architecture
            - Alpine.js functionality patterns
            - DDEV environment considerations
            
            A pull request will be created with the automated fixes for your review.
            `;
            
            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
            } catch (error) {
              console.log('Could not comment on original PR:', error.message);
            }