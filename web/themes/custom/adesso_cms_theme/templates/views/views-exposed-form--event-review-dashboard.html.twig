{#
/**
 * @file
 * Exposed form template for Event Review Dashboard
 * Swiss-compliant filter form with enhanced accessibility
 *
 * Available variables:
 * - form: The exposed form elements
 * - attributes: HTML attributes for the form
 */
#}

<form{{ attributes.addClass('event-review-exposed-form', 'space-y-4') }}>
  
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
    
    {# Status Filter #}
    {% if form.moderation_state %}
      <div class="form-group">
        <div class="space-y-2">
          {{ form.moderation_state }}
        </div>
      </div>
    {% endif %}
    
    {# Date Range Filter #}
    {% if form.created %}
      <div class="form-group">
        <div class="space-y-2">
          {{ form.created }}
        </div>
      </div>
    {% endif %}
    
    {# User Filter #}
    {% if form.uid %}
      <div class="form-group">
        <div class="space-y-2">
          {{ form.uid }}
        </div>
      </div>
    {% endif %}
    
    {# Action Buttons #}
    <div class="form-group flex items-end space-x-2">
      {% if form.submit %}
        <div>
          {{ form.submit }}
        </div>
      {% endif %}
      
      {% if form.reset %}
        <div>
          {{ form.reset }}
        </div>
      {% endif %}
    </div>
  </div>
  
  {# Advanced Filters Toggle (if needed) #}
  {% set has_advanced_filters = form.created_min or form.created_max %}
  {% if has_advanced_filters %}
    <div class="border-t border-gray-200 pt-4" x-data="{ showAdvanced: false }">
      <button 
        type="button" 
        @click="showAdvanced = !showAdvanced"
        class="flex items-center text-sm font-medium text-red-600 hover:text-red-500"
        :aria-expanded="showAdvanced"
        aria-controls="advanced-filters"
      >
        <svg 
          class="w-4 h-4 mr-1 transition-transform duration-200"
          :class="{ 'rotate-90': showAdvanced }"
          fill="none" 
          stroke="currentColor" 
          viewBox="0 0 24 24"
        >
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
        Erweiterte Filter
      </button>
      
      <div 
        id="advanced-filters"
        x-show="showAdvanced" 
        x-transition:enter="transition ease-out duration-200"
        x-transition:enter-start="opacity-0 transform scale-95"
        x-transition:enter-end="opacity-100 transform scale-100"
        x-transition:leave="transition ease-in duration-150"
        x-transition:leave-start="opacity-100 transform scale-100"
        x-transition:leave-end="opacity-0 transform scale-95"
        class="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4 p-4 bg-gray-50 rounded-lg"
      >
        {% if form.created_min %}
          <div class="form-group">
            {{ form.created_min }}
          </div>
        {% endif %}
        
        {% if form.created_max %}
          <div class="form-group">
            {{ form.created_max }}
          </div>
        {% endif %}
      </div>
    </div>
  {% endif %}
  
  {# Filter Status Indicator #}
  <div id="filter-status" class="hidden">
    <div class="bg-blue-50 border border-blue-200 rounded-md p-3">
      <div class="flex items-center">
        <svg class="w-5 h-5 text-blue-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707v4.586a1 1 0 01-.293.707L9 19.414A1 1 0 018 18.707V14.586a1 1 0 00-.293-.707L1.293 7.293A1 1 0 011 6.586V4z"></path>
        </svg>
        <span class="text-sm font-medium text-blue-800">
          Filter aktiv: <span id="active-filters"></span>
        </span>
        <button 
          type="button" 
          id="clear-filters"
          class="ml-2 text-blue-600 hover:text-blue-500 text-sm underline"
        >
          Alle Filter zurücksetzen
        </button>
      </div>
    </div>
  </div>
  
  {# Hidden elements #}
  <div class="sr-only">
    {{ form|without('moderation_state', 'created', 'uid', 'submit', 'reset', 'created_min', 'created_max') }}
  </div>

</form>

{# Enhanced Filter JavaScript #}
<script>
(function() {
  'use strict';

  document.addEventListener('DOMContentLoaded', function() {
    initializeFilterEnhancements();
  });

  function initializeFilterEnhancements() {
    const form = document.querySelector('.event-review-exposed-form');
    if (!form) return;

    const filterStatusElement = document.getElementById('filter-status');
    const activeFiltersElement = document.getElementById('active-filters');
    const clearFiltersButton = document.getElementById('clear-filters');

    // Update filter status indicator
    function updateFilterStatus() {
      const filters = [];
      
      // Check each filter type
      const statusFilter = form.querySelector('select[name="moderation_state"]');
      if (statusFilter && statusFilter.value) {
        const statusText = statusFilter.selectedOptions[0].textContent;
        filters.push(`Status: ${statusText}`);
      }
      
      const dateFilter = form.querySelector('input[name="created[min]"], input[name="created[max]"]');
      if (dateFilter && dateFilter.value) {
        filters.push('Datumsbereich aktiv');
      }
      
      const userFilter = form.querySelector('select[name="uid"]');
      if (userFilter && userFilter.value) {
        const userText = userFilter.selectedOptions[0].textContent;
        filters.push(`Benutzer: ${userText}`);
      }
      
      // Update UI
      if (filters.length > 0) {
        if (activeFiltersElement) {
          activeFiltersElement.textContent = filters.join(', ');
        }
        if (filterStatusElement) {
          filterStatusElement.classList.remove('hidden');
        }
      } else {
        if (filterStatusElement) {
          filterStatusElement.classList.add('hidden');
        }
      }
    }

    // Clear all filters
    if (clearFiltersButton) {
      clearFiltersButton.addEventListener('click', function() {
        // Reset all form fields
        const selects = form.querySelectorAll('select');
        const inputs = form.querySelectorAll('input[type="text"], input[type="date"]');
        
        selects.forEach(select => {
          select.selectedIndex = 0;
        });
        
        inputs.forEach(input => {
          input.value = '';
        });
        
        // Submit form to apply reset
        form.submit();
      });
    }

    // Monitor form changes
    const formElements = form.querySelectorAll('select, input');
    formElements.forEach(element => {
      element.addEventListener('change', updateFilterStatus);
    });

    // Auto-submit form on filter change (with debounce)
    let submitTimeout;
    formElements.forEach(element => {
      element.addEventListener('change', function() {
        clearTimeout(submitTimeout);
        submitTimeout = setTimeout(() => {
          // Only auto-submit for select elements, not text inputs
          if (element.tagName === 'SELECT') {
            form.submit();
          }
        }, 300);
      });
    });

    // Enhanced form accessibility
    enhanceFilterAccessibility();
    
    // Initial status update
    updateFilterStatus();
  }

  function enhanceFilterAccessibility() {
    const form = document.querySelector('.event-review-exposed-form');
    if (!form) return;

    // Add ARIA labels and descriptions
    const statusSelect = form.querySelector('select[name="moderation_state"]');
    if (statusSelect) {
      statusSelect.setAttribute('aria-label', 'Nach Status filtern');
      statusSelect.setAttribute('aria-describedby', 'status-filter-help');
      
      // Add help text
      const helpText = document.createElement('div');
      helpText.id = 'status-filter-help';
      helpText.className = 'sr-only';
      helpText.textContent = 'Filtert Veranstaltungen nach ihrem Genehmigungsstatus';
      statusSelect.parentNode.appendChild(helpText);
    }

    const userSelect = form.querySelector('select[name="uid"]');
    if (userSelect) {
      userSelect.setAttribute('aria-label', 'Nach Benutzer filtern');
      userSelect.setAttribute('aria-describedby', 'user-filter-help');
      
      const helpText = document.createElement('div');
      helpText.id = 'user-filter-help';
      helpText.className = 'sr-only';
      helpText.textContent = 'Filtert Veranstaltungen nach dem Benutzer, der sie eingereicht hat';
      userSelect.parentNode.appendChild(helpText);
    }

    // Add role="search" to form
    form.setAttribute('role', 'search');
    form.setAttribute('aria-label', 'Filter für Veranstaltungen');

    // Keyboard shortcuts
    document.addEventListener('keydown', function(e) {
      if (!form.contains(e.target)) return;
      
      // Alt+R to reset filters
      if (e.altKey && e.key === 'r') {
        e.preventDefault();
        const clearButton = document.getElementById('clear-filters');
        if (clearButton) {
          clearButton.click();
        }
      }
      
      // Alt+S to submit filters
      if (e.altKey && e.key === 's') {
        e.preventDefault();
        const submitButton = form.querySelector('input[type="submit"]');
        if (submitButton) {
          submitButton.click();
        }
      }
    });
  }

})();
</script>

{# Enhanced CSS for exposed form #}
<style>
  /* Exposed form styling */
  .event-review-exposed-form .form-item {
    margin-bottom: 0;
  }
  
  .event-review-exposed-form label {
    @apply block text-sm font-medium text-gray-700 mb-1;
  }
  
  .event-review-exposed-form select,
  .event-review-exposed-form input[type="text"],
  .event-review-exposed-form input[type="date"] {
    @apply w-full rounded-md border-gray-300 shadow-sm focus:border-red-500 focus:ring-red-500 sm:text-sm;
    min-height: 44px;
  }
  
  .event-review-exposed-form input[type="submit"],
  .event-review-exposed-form input[type="button"] {
    @apply bg-red-600 text-white hover:bg-red-700 px-4 py-2 rounded-md font-medium transition-colors shadow-sm focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2;
    min-height: 44px;
    min-width: 44px;
  }
  
  .event-review-exposed-form input[type="button"] {
    @apply bg-gray-600 hover:bg-gray-700;
  }
  
  /* Form group styling */
  .event-review-exposed-form .form-group {
    @apply space-y-1;
  }
  
  /* Advanced filters styling */
  .event-review-exposed-form .bg-gray-50 {
    border: 1px solid #e5e7eb;
  }
  
  /* High contrast support */
  @media (prefers-contrast: high) {
    .event-review-exposed-form select,
    .event-review-exposed-form input {
      border: 2px solid;
    }
  }
  
  /* Focus visible enhancements */
  .event-review-exposed-form input:focus-visible,
  .event-review-exposed-form select:focus-visible,
  .event-review-exposed-form button:focus-visible {
    outline: 2px solid #dc2626;
    outline-offset: 2px;
  }
  
  /* Loading states */
  .event-review-exposed-form.loading {
    opacity: 0.7;
    pointer-events: none;
  }
  
  .event-review-exposed-form.loading::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 20px;
    height: 20px;
    margin: -10px 0 0 -10px;
    border: 2px solid #dc2626;
    border-radius: 50%;
    border-top-color: transparent;
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }
</style>